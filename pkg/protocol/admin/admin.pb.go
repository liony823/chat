// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: admin/admin.proto

package admin

import (
	common "github.com/openimsdk/chat/pkg/protocol/common"
	sdkws "github.com/openimsdk/protocol/sdkws"
	wrapperspb "github.com/openimsdk/protocol/wrapperspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// login
type LoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	mi := &file_admin_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{0}
}

func (x *LoginReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AdminAccount  string                 `protobuf:"bytes,1,opt,name=adminAccount,proto3" json:"adminAccount"`
	AdminToken    string                 `protobuf:"bytes,2,opt,name=adminToken,proto3" json:"adminToken"`
	Nickname      string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL       string                 `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	Level         int32                  `protobuf:"varint,5,opt,name=level,proto3" json:"level"`
	AdminUserID   string                 `protobuf:"bytes,6,opt,name=adminUserID,proto3" json:"adminUserID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	mi := &file_admin_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResp) GetAdminAccount() string {
	if x != nil {
		return x.AdminAccount
	}
	return ""
}

func (x *LoginResp) GetAdminToken() string {
	if x != nil {
		return x.AdminToken
	}
	return ""
}

func (x *LoginResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LoginResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *LoginResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LoginResp) GetAdminUserID() string {
	if x != nil {
		return x.AdminUserID
	}
	return ""
}

type AddAdminAccountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	FaceURL       string                 `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	Nickname      string                 `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAdminAccountReq) Reset() {
	*x = AddAdminAccountReq{}
	mi := &file_admin_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminAccountReq) ProtoMessage() {}

func (x *AddAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminAccountReq.ProtoReflect.Descriptor instead.
func (*AddAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{2}
}

func (x *AddAdminAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AddAdminAccountReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddAdminAccountReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *AddAdminAccountReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type AddAdminAccountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAdminAccountResp) Reset() {
	*x = AddAdminAccountResp{}
	mi := &file_admin_admin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminAccountResp) ProtoMessage() {}

func (x *AddAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminAccountResp.ProtoReflect.Descriptor instead.
func (*AddAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{3}
}

type AdminUpdateInfoReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Account       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Password      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	FaceURL       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	Nickname      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname"`
	Level         *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=level,proto3" json:"level"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateInfoReq) Reset() {
	*x = AdminUpdateInfoReq{}
	mi := &file_admin_admin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateInfoReq) ProtoMessage() {}

func (x *AdminUpdateInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateInfoReq.ProtoReflect.Descriptor instead.
func (*AdminUpdateInfoReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdateInfoReq) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetFaceURL() *wrapperspb.StringValue {
	if x != nil {
		return x.FaceURL
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.Level
	}
	return nil
}

type AdminUpdateInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	FaceURL       string                 `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateInfoResp) Reset() {
	*x = AdminUpdateInfoResp{}
	mi := &file_admin_admin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateInfoResp) ProtoMessage() {}

func (x *AdminUpdateInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateInfoResp.ProtoReflect.Descriptor instead.
func (*AdminUpdateInfoResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{5}
}

func (x *AdminUpdateInfoResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

type ChangePasswordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePasswordReq) Reset() {
	*x = ChangePasswordReq{}
	mi := &file_admin_admin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordReq) ProtoMessage() {}

func (x *ChangePasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{6}
}

func (x *ChangePasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ChangePasswordResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangePasswordResp) Reset() {
	*x = ChangePasswordResp{}
	mi := &file_admin_admin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResp) ProtoMessage() {}

func (x *ChangePasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResp.ProtoReflect.Descriptor instead.
func (*ChangePasswordResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{7}
}

type GetAdminInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAdminInfoReq) Reset() {
	*x = GetAdminInfoReq{}
	mi := &file_admin_admin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminInfoReq) ProtoMessage() {}

func (x *GetAdminInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminInfoReq.ProtoReflect.Descriptor instead.
func (*GetAdminInfoReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{8}
}

type ChangeAdminPasswordReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserID          string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	CurrentPassword string                 `protobuf:"bytes,2,opt,name=currentPassword,proto3" json:"currentPassword"`
	NewPassword     string                 `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChangeAdminPasswordReq) Reset() {
	*x = ChangeAdminPasswordReq{}
	mi := &file_admin_admin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeAdminPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdminPasswordReq) ProtoMessage() {}

func (x *ChangeAdminPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdminPasswordReq.ProtoReflect.Descriptor instead.
func (*ChangeAdminPasswordReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeAdminPasswordReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChangeAdminPasswordReq) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *ChangeAdminPasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangeAdminPasswordResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeAdminPasswordResp) Reset() {
	*x = ChangeAdminPasswordResp{}
	mi := &file_admin_admin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeAdminPasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdminPasswordResp) ProtoMessage() {}

func (x *ChangeAdminPasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdminPasswordResp.ProtoReflect.Descriptor instead.
func (*ChangeAdminPasswordResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{10}
}

type DelAdminAccountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIDs       []string               `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelAdminAccountReq) Reset() {
	*x = DelAdminAccountReq{}
	mi := &file_admin_admin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdminAccountReq) ProtoMessage() {}

func (x *DelAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdminAccountReq.ProtoReflect.Descriptor instead.
func (*DelAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{11}
}

func (x *DelAdminAccountReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelAdminAccountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelAdminAccountResp) Reset() {
	*x = DelAdminAccountResp{}
	mi := &file_admin_admin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdminAccountResp) ProtoMessage() {}

func (x *DelAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdminAccountResp.ProtoReflect.Descriptor instead.
func (*DelAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{12}
}

type SearchAdminAccountReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Account       string                   `protobuf:"bytes,3,opt,name=account,proto3" json:"account"`
	Nickname      string                   `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAdminAccountReq) Reset() {
	*x = SearchAdminAccountReq{}
	mi := &file_admin_admin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminAccountReq) ProtoMessage() {}

func (x *SearchAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminAccountReq.ProtoReflect.Descriptor instead.
func (*SearchAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{13}
}

func (x *SearchAdminAccountReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchAdminAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SearchAdminAccountReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type SearchAdminAccountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	AdminAccounts []*GetAdminInfoResp    `protobuf:"bytes,2,rep,name=adminAccounts,proto3" json:"adminAccounts"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAdminAccountResp) Reset() {
	*x = SearchAdminAccountResp{}
	mi := &file_admin_admin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminAccountResp) ProtoMessage() {}

func (x *SearchAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminAccountResp.ProtoReflect.Descriptor instead.
func (*SearchAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{14}
}

func (x *SearchAdminAccountResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchAdminAccountResp) GetAdminAccounts() []*GetAdminInfoResp {
	if x != nil {
		return x.AdminAccounts
	}
	return nil
}

type GetAdminInfoResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Account          string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	FaceURL          string                 `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL"`
	Nickname         string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	UserID           string                 `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID"`
	EnableGoogleAuth bool                   `protobuf:"varint,5,opt,name=enableGoogleAuth,proto3" json:"enableGoogleAuth"`
	Level            int32                  `protobuf:"varint,6,opt,name=level,proto3" json:"level"`
	CreateTime       int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime"`
	Menus            []*common.AdminMenu    `protobuf:"bytes,8,rep,name=menus,proto3" json:"menus"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetAdminInfoResp) Reset() {
	*x = GetAdminInfoResp{}
	mi := &file_admin_admin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminInfoResp) ProtoMessage() {}

func (x *GetAdminInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminInfoResp.ProtoReflect.Descriptor instead.
func (*GetAdminInfoResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{15}
}

func (x *GetAdminInfoResp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetAdminInfoResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *GetAdminInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GetAdminInfoResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetAdminInfoResp) GetEnableGoogleAuth() bool {
	if x != nil {
		return x.EnableGoogleAuth
	}
	return false
}

func (x *GetAdminInfoResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetAdminInfoResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetAdminInfoResp) GetMenus() []*common.AdminMenu {
	if x != nil {
		return x.Menus
	}
	return nil
}

type AddDefaultFriendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIDs       []string               `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDefaultFriendReq) Reset() {
	*x = AddDefaultFriendReq{}
	mi := &file_admin_admin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultFriendReq) ProtoMessage() {}

func (x *AddDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*AddDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{16}
}

func (x *AddDefaultFriendReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type AddDefaultFriendResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDefaultFriendResp) Reset() {
	*x = AddDefaultFriendResp{}
	mi := &file_admin_admin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultFriendResp) ProtoMessage() {}

func (x *AddDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*AddDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{17}
}

type DelDefaultFriendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIDs       []string               `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelDefaultFriendReq) Reset() {
	*x = DelDefaultFriendReq{}
	mi := &file_admin_admin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultFriendReq) ProtoMessage() {}

func (x *DelDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*DelDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{18}
}

func (x *DelDefaultFriendReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelDefaultFriendResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelDefaultFriendResp) Reset() {
	*x = DelDefaultFriendResp{}
	mi := &file_admin_admin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultFriendResp) ProtoMessage() {}

func (x *DelDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*DelDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{19}
}

type FindDefaultFriendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindDefaultFriendReq) Reset() {
	*x = FindDefaultFriendReq{}
	mi := &file_admin_admin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultFriendReq) ProtoMessage() {}

func (x *FindDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*FindDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{20}
}

type FindDefaultFriendResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIDs       []string               `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindDefaultFriendResp) Reset() {
	*x = FindDefaultFriendResp{}
	mi := &file_admin_admin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultFriendResp) ProtoMessage() {}

func (x *FindDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*FindDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{21}
}

func (x *FindDefaultFriendResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type SearchDefaultFriendReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchDefaultFriendReq) Reset() {
	*x = SearchDefaultFriendReq{}
	mi := &file_admin_admin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultFriendReq) ProtoMessage() {}

func (x *SearchDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{22}
}

func (x *SearchDefaultFriendReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchDefaultFriendReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DefaultFriendAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	CreateTime    int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"`
	User          *common.UserPublicInfo `protobuf:"bytes,3,opt,name=user,proto3" json:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultFriendAttribute) Reset() {
	*x = DefaultFriendAttribute{}
	mi := &file_admin_admin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultFriendAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFriendAttribute) ProtoMessage() {}

func (x *DefaultFriendAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFriendAttribute.ProtoReflect.Descriptor instead.
func (*DefaultFriendAttribute) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{23}
}

func (x *DefaultFriendAttribute) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DefaultFriendAttribute) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DefaultFriendAttribute) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchDefaultFriendResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         uint32                    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users         []*DefaultFriendAttribute `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchDefaultFriendResp) Reset() {
	*x = SearchDefaultFriendResp{}
	mi := &file_admin_admin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultFriendResp) ProtoMessage() {}

func (x *SearchDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{24}
}

func (x *SearchDefaultFriendResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchDefaultFriendResp) GetUsers() []*DefaultFriendAttribute {
	if x != nil {
		return x.Users
	}
	return nil
}

type AddDefaultGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupIDs      []string               `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDefaultGroupReq) Reset() {
	*x = AddDefaultGroupReq{}
	mi := &file_admin_admin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultGroupReq) ProtoMessage() {}

func (x *AddDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*AddDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{25}
}

func (x *AddDefaultGroupReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type AddDefaultGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDefaultGroupResp) Reset() {
	*x = AddDefaultGroupResp{}
	mi := &file_admin_admin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultGroupResp) ProtoMessage() {}

func (x *AddDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*AddDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{26}
}

type DelDefaultGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupIDs      []string               `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelDefaultGroupReq) Reset() {
	*x = DelDefaultGroupReq{}
	mi := &file_admin_admin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultGroupReq) ProtoMessage() {}

func (x *DelDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*DelDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{27}
}

func (x *DelDefaultGroupReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DelDefaultGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelDefaultGroupResp) Reset() {
	*x = DelDefaultGroupResp{}
	mi := &file_admin_admin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultGroupResp) ProtoMessage() {}

func (x *DelDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*DelDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{28}
}

type FindDefaultGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindDefaultGroupReq) Reset() {
	*x = FindDefaultGroupReq{}
	mi := &file_admin_admin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultGroupReq) ProtoMessage() {}

func (x *FindDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*FindDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{29}
}

type FindDefaultGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupIDs      []string               `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindDefaultGroupResp) Reset() {
	*x = FindDefaultGroupResp{}
	mi := &file_admin_admin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultGroupResp) ProtoMessage() {}

func (x *FindDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*FindDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{30}
}

func (x *FindDefaultGroupResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type SearchDefaultGroupReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchDefaultGroupReq) Reset() {
	*x = SearchDefaultGroupReq{}
	mi := &file_admin_admin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultGroupReq) ProtoMessage() {}

func (x *SearchDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{31}
}

func (x *SearchDefaultGroupReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchDefaultGroupReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GroupAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupID       string                 `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
	CreateTime    int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"`
	Group         *sdkws.GroupInfo       `protobuf:"bytes,3,opt,name=group,proto3" json:"group"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupAttribute) Reset() {
	*x = GroupAttribute{}
	mi := &file_admin_admin_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAttribute) ProtoMessage() {}

func (x *GroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAttribute.ProtoReflect.Descriptor instead.
func (*GroupAttribute) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{32}
}

func (x *GroupAttribute) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupAttribute) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupAttribute) GetGroup() *sdkws.GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

type SearchDefaultGroupResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	GroupIDs      []string               `protobuf:"bytes,2,rep,name=groupIDs,proto3" json:"groupIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchDefaultGroupResp) Reset() {
	*x = SearchDefaultGroupResp{}
	mi := &file_admin_admin_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultGroupResp) ProtoMessage() {}

func (x *SearchDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{33}
}

func (x *SearchDefaultGroupResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchDefaultGroupResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type AddInvitationCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codes         []string               `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInvitationCodeReq) Reset() {
	*x = AddInvitationCodeReq{}
	mi := &file_admin_admin_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvitationCodeReq) ProtoMessage() {}

func (x *AddInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*AddInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{34}
}

func (x *AddInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type AddInvitationCodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInvitationCodeResp) Reset() {
	*x = AddInvitationCodeResp{}
	mi := &file_admin_admin_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvitationCodeResp) ProtoMessage() {}

func (x *AddInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*AddInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{35}
}

type GenInvitationCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Len           int32                  `protobuf:"varint,1,opt,name=len,proto3" json:"len"`
	Num           int32                  `protobuf:"varint,2,opt,name=num,proto3" json:"num"`
	Chars         string                 `protobuf:"bytes,3,opt,name=chars,proto3" json:"chars"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenInvitationCodeReq) Reset() {
	*x = GenInvitationCodeReq{}
	mi := &file_admin_admin_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenInvitationCodeReq) ProtoMessage() {}

func (x *GenInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*GenInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{36}
}

func (x *GenInvitationCodeReq) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *GenInvitationCodeReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GenInvitationCodeReq) GetChars() string {
	if x != nil {
		return x.Chars
	}
	return ""
}

type GenInvitationCodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenInvitationCodeResp) Reset() {
	*x = GenInvitationCodeResp{}
	mi := &file_admin_admin_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenInvitationCodeResp) ProtoMessage() {}

func (x *GenInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*GenInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{37}
}

type FindInvitationCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codes         []string               `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindInvitationCodeReq) Reset() {
	*x = FindInvitationCodeReq{}
	mi := &file_admin_admin_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvitationCodeReq) ProtoMessage() {}

func (x *FindInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*FindInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{38}
}

func (x *FindInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type FindInvitationCodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codes         []*InvitationRegister  `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindInvitationCodeResp) Reset() {
	*x = FindInvitationCodeResp{}
	mi := &file_admin_admin_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvitationCodeResp) ProtoMessage() {}

func (x *FindInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*FindInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{39}
}

func (x *FindInvitationCodeResp) GetCodes() []*InvitationRegister {
	if x != nil {
		return x.Codes
	}
	return nil
}

type UseInvitationCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseInvitationCodeReq) Reset() {
	*x = UseInvitationCodeReq{}
	mi := &file_admin_admin_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseInvitationCodeReq) ProtoMessage() {}

func (x *UseInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*UseInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{40}
}

func (x *UseInvitationCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UseInvitationCodeReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UseInvitationCodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseInvitationCodeResp) Reset() {
	*x = UseInvitationCodeResp{}
	mi := &file_admin_admin_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseInvitationCodeResp) ProtoMessage() {}

func (x *UseInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*UseInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{41}
}

type DelInvitationCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codes         []string               `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelInvitationCodeReq) Reset() {
	*x = DelInvitationCodeReq{}
	mi := &file_admin_admin_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInvitationCodeReq) ProtoMessage() {}

func (x *DelInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*DelInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{42}
}

func (x *DelInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type DelInvitationCodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelInvitationCodeResp) Reset() {
	*x = DelInvitationCodeResp{}
	mi := &file_admin_admin_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInvitationCodeResp) ProtoMessage() {}

func (x *DelInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*DelInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{43}
}

type InvitationRegister struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvitationCode string                 `protobuf:"bytes,1,opt,name=invitationCode,proto3" json:"invitationCode"`
	CreateTime     int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"`
	UsedUserID     string                 `protobuf:"bytes,3,opt,name=usedUserID,proto3" json:"usedUserID"`
	UsedUser       *common.UserPublicInfo `protobuf:"bytes,4,opt,name=usedUser,proto3" json:"usedUser"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InvitationRegister) Reset() {
	*x = InvitationRegister{}
	mi := &file_admin_admin_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvitationRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationRegister) ProtoMessage() {}

func (x *InvitationRegister) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationRegister.ProtoReflect.Descriptor instead.
func (*InvitationRegister) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{44}
}

func (x *InvitationRegister) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *InvitationRegister) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *InvitationRegister) GetUsedUserID() string {
	if x != nil {
		return x.UsedUserID
	}
	return ""
}

func (x *InvitationRegister) GetUsedUser() *common.UserPublicInfo {
	if x != nil {
		return x.UsedUser
	}
	return nil
}

type SearchInvitationCodeReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Status        int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	UserIDs       []string                 `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"`
	Codes         []string                 `protobuf:"bytes,3,rep,name=codes,proto3" json:"codes"`
	Keyword       string                   `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchInvitationCodeReq) Reset() {
	*x = SearchInvitationCodeReq{}
	mi := &file_admin_admin_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInvitationCodeReq) ProtoMessage() {}

func (x *SearchInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*SearchInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{45}
}

func (x *SearchInvitationCodeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchInvitationCodeReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *SearchInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *SearchInvitationCodeReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchInvitationCodeReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchInvitationCodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	List          []*InvitationRegister  `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchInvitationCodeResp) Reset() {
	*x = SearchInvitationCodeResp{}
	mi := &file_admin_admin_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInvitationCodeResp) ProtoMessage() {}

func (x *SearchInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*SearchInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{46}
}

func (x *SearchInvitationCodeResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchInvitationCodeResp) GetList() []*InvitationRegister {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchUserIPLimitLoginReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserIPLimitLoginReq) Reset() {
	*x = SearchUserIPLimitLoginReq{}
	mi := &file_admin_admin_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserIPLimitLoginReq) ProtoMessage() {}

func (x *SearchUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*SearchUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{47}
}

func (x *SearchUserIPLimitLoginReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserIPLimitLoginReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type LimitUserLoginIP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip"`
	CreateTime    int64                  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime"`
	User          *common.UserPublicInfo `protobuf:"bytes,4,opt,name=user,proto3" json:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LimitUserLoginIP) Reset() {
	*x = LimitUserLoginIP{}
	mi := &file_admin_admin_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitUserLoginIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitUserLoginIP) ProtoMessage() {}

func (x *LimitUserLoginIP) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitUserLoginIP.ProtoReflect.Descriptor instead.
func (*LimitUserLoginIP) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{48}
}

func (x *LimitUserLoginIP) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LimitUserLoginIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LimitUserLoginIP) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *LimitUserLoginIP) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchUserIPLimitLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Limits        []*LimitUserLoginIP    `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserIPLimitLoginResp) Reset() {
	*x = SearchUserIPLimitLoginResp{}
	mi := &file_admin_admin_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserIPLimitLoginResp) ProtoMessage() {}

func (x *SearchUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*SearchUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{49}
}

func (x *SearchUserIPLimitLoginResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserIPLimitLoginResp) GetLimits() []*LimitUserLoginIP {
	if x != nil {
		return x.Limits
	}
	return nil
}

type UserIPLimitLogin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserIPLimitLogin) Reset() {
	*x = UserIPLimitLogin{}
	mi := &file_admin_admin_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIPLimitLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIPLimitLogin) ProtoMessage() {}

func (x *UserIPLimitLogin) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIPLimitLogin.ProtoReflect.Descriptor instead.
func (*UserIPLimitLogin) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{50}
}

func (x *UserIPLimitLogin) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserIPLimitLogin) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AddUserIPLimitLoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limits        []*UserIPLimitLogin    `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserIPLimitLoginReq) Reset() {
	*x = AddUserIPLimitLoginReq{}
	mi := &file_admin_admin_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserIPLimitLoginReq) ProtoMessage() {}

func (x *AddUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*AddUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{51}
}

func (x *AddUserIPLimitLoginReq) GetLimits() []*UserIPLimitLogin {
	if x != nil {
		return x.Limits
	}
	return nil
}

type AddUserIPLimitLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserIPLimitLoginResp) Reset() {
	*x = AddUserIPLimitLoginResp{}
	mi := &file_admin_admin_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserIPLimitLoginResp) ProtoMessage() {}

func (x *AddUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*AddUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{52}
}

type DelUserIPLimitLoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limits        []*UserIPLimitLogin    `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelUserIPLimitLoginReq) Reset() {
	*x = DelUserIPLimitLoginReq{}
	mi := &file_admin_admin_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserIPLimitLoginReq) ProtoMessage() {}

func (x *DelUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*DelUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{53}
}

func (x *DelUserIPLimitLoginReq) GetLimits() []*UserIPLimitLogin {
	if x != nil {
		return x.Limits
	}
	return nil
}

type DelUserIPLimitLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelUserIPLimitLoginResp) Reset() {
	*x = DelUserIPLimitLoginResp{}
	mi := &file_admin_admin_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserIPLimitLoginResp) ProtoMessage() {}

func (x *DelUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*DelUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{54}
}

type IPForbidden struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	LimitRegister bool                   `protobuf:"varint,2,opt,name=limitRegister,proto3" json:"limitRegister"`
	LimitLogin    bool                   `protobuf:"varint,3,opt,name=limitLogin,proto3" json:"limitLogin"`
	CreateTime    int64                  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPForbidden) Reset() {
	*x = IPForbidden{}
	mi := &file_admin_admin_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPForbidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPForbidden) ProtoMessage() {}

func (x *IPForbidden) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPForbidden.ProtoReflect.Descriptor instead.
func (*IPForbidden) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{55}
}

func (x *IPForbidden) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPForbidden) GetLimitRegister() bool {
	if x != nil {
		return x.LimitRegister
	}
	return false
}

func (x *IPForbidden) GetLimitLogin() bool {
	if x != nil {
		return x.LimitLogin
	}
	return false
}

func (x *IPForbidden) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type IPForbiddenAdd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	LimitRegister bool                   `protobuf:"varint,2,opt,name=limitRegister,proto3" json:"limitRegister"`
	LimitLogin    bool                   `protobuf:"varint,3,opt,name=limitLogin,proto3" json:"limitLogin"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPForbiddenAdd) Reset() {
	*x = IPForbiddenAdd{}
	mi := &file_admin_admin_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPForbiddenAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPForbiddenAdd) ProtoMessage() {}

func (x *IPForbiddenAdd) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPForbiddenAdd.ProtoReflect.Descriptor instead.
func (*IPForbiddenAdd) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{56}
}

func (x *IPForbiddenAdd) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPForbiddenAdd) GetLimitRegister() bool {
	if x != nil {
		return x.LimitRegister
	}
	return false
}

func (x *IPForbiddenAdd) GetLimitLogin() bool {
	if x != nil {
		return x.LimitLogin
	}
	return false
}

type SearchIPForbiddenReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Status        int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchIPForbiddenReq) Reset() {
	*x = SearchIPForbiddenReq{}
	mi := &file_admin_admin_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIPForbiddenReq) ProtoMessage() {}

func (x *SearchIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*SearchIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{57}
}

func (x *SearchIPForbiddenReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchIPForbiddenReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchIPForbiddenReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchIPForbiddenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Forbiddens    []*IPForbidden         `protobuf:"bytes,2,rep,name=forbiddens,proto3" json:"forbiddens"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchIPForbiddenResp) Reset() {
	*x = SearchIPForbiddenResp{}
	mi := &file_admin_admin_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIPForbiddenResp) ProtoMessage() {}

func (x *SearchIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*SearchIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{58}
}

func (x *SearchIPForbiddenResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchIPForbiddenResp) GetForbiddens() []*IPForbidden {
	if x != nil {
		return x.Forbiddens
	}
	return nil
}

type AddIPForbiddenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Forbiddens    []*IPForbiddenAdd      `protobuf:"bytes,1,rep,name=forbiddens,proto3" json:"forbiddens"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIPForbiddenReq) Reset() {
	*x = AddIPForbiddenReq{}
	mi := &file_admin_admin_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPForbiddenReq) ProtoMessage() {}

func (x *AddIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*AddIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{59}
}

func (x *AddIPForbiddenReq) GetForbiddens() []*IPForbiddenAdd {
	if x != nil {
		return x.Forbiddens
	}
	return nil
}

type AddIPForbiddenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIPForbiddenResp) Reset() {
	*x = AddIPForbiddenResp{}
	mi := &file_admin_admin_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPForbiddenResp) ProtoMessage() {}

func (x *AddIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*AddIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{60}
}

type DelIPForbiddenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ips           []string               `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelIPForbiddenReq) Reset() {
	*x = DelIPForbiddenReq{}
	mi := &file_admin_admin_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelIPForbiddenReq) ProtoMessage() {}

func (x *DelIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*DelIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{61}
}

func (x *DelIPForbiddenReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DelIPForbiddenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelIPForbiddenResp) Reset() {
	*x = DelIPForbiddenResp{}
	mi := &file_admin_admin_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelIPForbiddenResp) ProtoMessage() {}

func (x *DelIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*DelIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{62}
}

// ################### User Limit ###################
type CheckRegisterForbiddenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRegisterForbiddenReq) Reset() {
	*x = CheckRegisterForbiddenReq{}
	mi := &file_admin_admin_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRegisterForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRegisterForbiddenReq) ProtoMessage() {}

func (x *CheckRegisterForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRegisterForbiddenReq.ProtoReflect.Descriptor instead.
func (*CheckRegisterForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{63}
}

func (x *CheckRegisterForbiddenReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CheckRegisterForbiddenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRegisterForbiddenResp) Reset() {
	*x = CheckRegisterForbiddenResp{}
	mi := &file_admin_admin_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRegisterForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRegisterForbiddenResp) ProtoMessage() {}

func (x *CheckRegisterForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRegisterForbiddenResp.ProtoReflect.Descriptor instead.
func (*CheckRegisterForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{64}
}

type CheckLoginForbiddenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckLoginForbiddenReq) Reset() {
	*x = CheckLoginForbiddenReq{}
	mi := &file_admin_admin_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLoginForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginForbiddenReq) ProtoMessage() {}

func (x *CheckLoginForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginForbiddenReq.ProtoReflect.Descriptor instead.
func (*CheckLoginForbiddenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{65}
}

func (x *CheckLoginForbiddenReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CheckLoginForbiddenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CheckLoginForbiddenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckLoginForbiddenResp) Reset() {
	*x = CheckLoginForbiddenResp{}
	mi := &file_admin_admin_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckLoginForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginForbiddenResp) ProtoMessage() {}

func (x *CheckLoginForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginForbiddenResp.ProtoReflect.Descriptor instead.
func (*CheckLoginForbiddenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{66}
}

// ################### login out ###################
type CancellationUserReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancellationUserReq) Reset() {
	*x = CancellationUserReq{}
	mi := &file_admin_admin_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancellationUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationUserReq) ProtoMessage() {}

func (x *CancellationUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationUserReq.ProtoReflect.Descriptor instead.
func (*CancellationUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{67}
}

func (x *CancellationUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CancellationUserReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CancellationUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancellationUserResp) Reset() {
	*x = CancellationUserResp{}
	mi := &file_admin_admin_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancellationUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationUserResp) ProtoMessage() {}

func (x *CancellationUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationUserResp.ProtoReflect.Descriptor instead.
func (*CancellationUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{68}
}

// ################### Block User, Unblock User ###################
type BlockUserReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserReq) Reset() {
	*x = BlockUserReq{}
	mi := &file_admin_admin_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserReq) ProtoMessage() {}

func (x *BlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserReq.ProtoReflect.Descriptor instead.
func (*BlockUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{69}
}

func (x *BlockUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockUserReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BlockUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserResp) Reset() {
	*x = BlockUserResp{}
	mi := &file_admin_admin_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResp) ProtoMessage() {}

func (x *BlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResp.ProtoReflect.Descriptor instead.
func (*BlockUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{70}
}

type UnblockUserReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIDs       []string               `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockUserReq) Reset() {
	*x = UnblockUserReq{}
	mi := &file_admin_admin_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserReq) ProtoMessage() {}

func (x *UnblockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserReq.ProtoReflect.Descriptor instead.
func (*UnblockUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{71}
}

func (x *UnblockUserReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type UnblockUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockUserResp) Reset() {
	*x = UnblockUserResp{}
	mi := &file_admin_admin_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResp) ProtoMessage() {}

func (x *UnblockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResp.ProtoReflect.Descriptor instead.
func (*UnblockUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{72}
}

type SearchBlockUserReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchBlockUserReq) Reset() {
	*x = SearchBlockUserReq{}
	mi := &file_admin_admin_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchBlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockUserReq) ProtoMessage() {}

func (x *SearchBlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockUserReq.ProtoReflect.Descriptor instead.
func (*SearchBlockUserReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{73}
}

func (x *SearchBlockUserReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchBlockUserReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BlockUserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Account       string                 `protobuf:"bytes,2,opt,name=account,proto3" json:"account"`
	PhoneNumber   string                 `protobuf:"bytes,3,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	AreaCode      string                 `protobuf:"bytes,4,opt,name=areaCode,proto3" json:"areaCode"`
	Email         string                 `protobuf:"bytes,5,opt,name=email,proto3" json:"email"`
	Nickname      string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname"`
	FaceURL       string                 `protobuf:"bytes,7,opt,name=faceURL,proto3" json:"faceURL"`
	Gender        int32                  `protobuf:"varint,8,opt,name=gender,proto3" json:"gender"`
	Reason        string                 `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason"`
	OpUserID      string                 `protobuf:"bytes,10,opt,name=opUserID,proto3" json:"opUserID"`
	CreateTime    int64                  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockUserInfo) Reset() {
	*x = BlockUserInfo{}
	mi := &file_admin_admin_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserInfo) ProtoMessage() {}

func (x *BlockUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserInfo.ProtoReflect.Descriptor instead.
func (*BlockUserInfo) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{74}
}

func (x *BlockUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockUserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BlockUserInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BlockUserInfo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *BlockUserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BlockUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlockUserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *BlockUserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *BlockUserInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockUserInfo) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *BlockUserInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type SearchBlockUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users         []*BlockUserInfo       `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchBlockUserResp) Reset() {
	*x = SearchBlockUserResp{}
	mi := &file_admin_admin_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchBlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockUserResp) ProtoMessage() {}

func (x *SearchBlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockUserResp.ProtoReflect.Descriptor instead.
func (*SearchBlockUserResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{75}
}

func (x *SearchBlockUserResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchBlockUserResp) GetUsers() []*BlockUserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type FindUserBlockInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIDs       []string               `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindUserBlockInfoReq) Reset() {
	*x = FindUserBlockInfoReq{}
	mi := &file_admin_admin_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserBlockInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserBlockInfoReq) ProtoMessage() {}

func (x *FindUserBlockInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserBlockInfoReq.ProtoReflect.Descriptor instead.
func (*FindUserBlockInfoReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{76}
}

func (x *FindUserBlockInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type BlockInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
	OpUserID      string                 `protobuf:"bytes,3,opt,name=opUserID,proto3" json:"opUserID"`
	CreateTime    int64                  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	mi := &file_admin_admin_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{77}
}

func (x *BlockInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockInfo) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *BlockInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type FindUserBlockInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*BlockInfo           `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindUserBlockInfoResp) Reset() {
	*x = FindUserBlockInfoResp{}
	mi := &file_admin_admin_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindUserBlockInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserBlockInfoResp) ProtoMessage() {}

func (x *FindUserBlockInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserBlockInfoResp.ProtoReflect.Descriptor instead.
func (*FindUserBlockInfoResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{78}
}

func (x *FindUserBlockInfoResp) GetBlocks() []*BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type CreateTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserType      int32                  `protobuf:"varint,32,opt,name=userType,proto3" json:"userType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTokenReq) Reset() {
	*x = CreateTokenReq{}
	mi := &file_admin_admin_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenReq) ProtoMessage() {}

func (x *CreateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenReq.ProtoReflect.Descriptor instead.
func (*CreateTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{79}
}

func (x *CreateTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateTokenReq) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

type CreateTokenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTokenResp) Reset() {
	*x = CreateTokenResp{}
	mi := &file_admin_admin_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResp) ProtoMessage() {}

func (x *CreateTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResp.ProtoReflect.Descriptor instead.
func (*CreateTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{80}
}

func (x *CreateTokenResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ParseTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseTokenReq) Reset() {
	*x = ParseTokenReq{}
	mi := &file_admin_admin_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTokenReq) ProtoMessage() {}

func (x *ParseTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTokenReq.ProtoReflect.Descriptor instead.
func (*ParseTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{81}
}

func (x *ParseTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ParseTokenResp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserID            string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	UserType          int32                  `protobuf:"varint,2,opt,name=userType,proto3" json:"userType"`
	ExpireTimeSeconds int64                  `protobuf:"varint,3,opt,name=expireTimeSeconds,proto3" json:"expireTimeSeconds"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ParseTokenResp) Reset() {
	*x = ParseTokenResp{}
	mi := &file_admin_admin_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTokenResp) ProtoMessage() {}

func (x *ParseTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTokenResp.ProtoReflect.Descriptor instead.
func (*ParseTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{82}
}

func (x *ParseTokenResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ParseTokenResp) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *ParseTokenResp) GetExpireTimeSeconds() int64 {
	if x != nil {
		return x.ExpireTimeSeconds
	}
	return 0
}

type InvalidateTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateTokenReq) Reset() {
	*x = InvalidateTokenReq{}
	mi := &file_admin_admin_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTokenReq) ProtoMessage() {}

func (x *InvalidateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTokenReq.ProtoReflect.Descriptor instead.
func (*InvalidateTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{83}
}

func (x *InvalidateTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type InvalidateTokenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvalidateTokenResp) Reset() {
	*x = InvalidateTokenResp{}
	mi := &file_admin_admin_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvalidateTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTokenResp) ProtoMessage() {}

func (x *InvalidateTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTokenResp.ProtoReflect.Descriptor instead.
func (*InvalidateTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{84}
}

type AddAppletReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	AppID         string                 `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	Priority      uint32                 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority"`
	Status        uint32                 `protobuf:"varint,7,opt,name=status,proto3" json:"status"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAppletReq) Reset() {
	*x = AddAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppletReq) ProtoMessage() {}

func (x *AddAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppletReq.ProtoReflect.Descriptor instead.
func (*AddAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{85}
}

func (x *AddAppletReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddAppletReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddAppletReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AddAppletReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddAppletReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddAppletReq) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AddAppletReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddAppletReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AddAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAppletResp) Reset() {
	*x = AddAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppletResp) ProtoMessage() {}

func (x *AddAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppletResp.ProtoReflect.Descriptor instead.
func (*AddAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{86}
}

type DelAppletReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppletIds     []string               `protobuf:"bytes,1,rep,name=appletIds,proto3" json:"appletIds"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelAppletReq) Reset() {
	*x = DelAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppletReq) ProtoMessage() {}

func (x *DelAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppletReq.ProtoReflect.Descriptor instead.
func (*DelAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{87}
}

func (x *DelAppletReq) GetAppletIds() []string {
	if x != nil {
		return x.AppletIds
	}
	return nil
}

type DelAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelAppletResp) Reset() {
	*x = DelAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppletResp) ProtoMessage() {}

func (x *DelAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppletResp.ProtoReflect.Descriptor instead.
func (*DelAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{88}
}

type UpdateAppletReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	AppID         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID"`
	Icon          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=url,proto3" json:"url"`
	Priority      *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=priority,proto3" json:"priority"`
	Status        *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	CreateTime    *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAppletReq) Reset() {
	*x = UpdateAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppletReq) ProtoMessage() {}

func (x *UpdateAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppletReq.ProtoReflect.Descriptor instead.
func (*UpdateAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateAppletReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAppletReq) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateAppletReq) GetAppID() *wrapperspb.StringValue {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *UpdateAppletReq) GetIcon() *wrapperspb.StringValue {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateAppletReq) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UpdateAppletReq) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateAppletReq) GetStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateAppletReq) GetCreateTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UpdateAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAppletResp) Reset() {
	*x = UpdateAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppletResp) ProtoMessage() {}

func (x *UpdateAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppletResp.ProtoReflect.Descriptor instead.
func (*UpdateAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{90}
}

type FindAppletReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAppletReq) Reset() {
	*x = FindAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAppletReq) ProtoMessage() {}

func (x *FindAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAppletReq.ProtoReflect.Descriptor instead.
func (*FindAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{91}
}

type FindAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Applets       []*common.AppletInfo   `protobuf:"bytes,1,rep,name=applets,proto3" json:"applets"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindAppletResp) Reset() {
	*x = FindAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAppletResp) ProtoMessage() {}

func (x *FindAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAppletResp.ProtoReflect.Descriptor instead.
func (*FindAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{92}
}

func (x *FindAppletResp) GetApplets() []*common.AppletInfo {
	if x != nil {
		return x.Applets
	}
	return nil
}

type SearchAppletReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAppletReq) Reset() {
	*x = SearchAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAppletReq) ProtoMessage() {}

func (x *SearchAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAppletReq.ProtoReflect.Descriptor instead.
func (*SearchAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{93}
}

func (x *SearchAppletReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchAppletReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Applets       []*common.AppletInfo   `protobuf:"bytes,2,rep,name=applets,proto3" json:"applets"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAppletResp) Reset() {
	*x = SearchAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAppletResp) ProtoMessage() {}

func (x *SearchAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAppletResp.ProtoReflect.Descriptor instead.
func (*SearchAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{94}
}

func (x *SearchAppletResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchAppletResp) GetApplets() []*common.AppletInfo {
	if x != nil {
		return x.Applets
	}
	return nil
}

type SetDefaultAppletReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppID         string                 `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID"`
	IsDefault     uint32                 `protobuf:"varint,2,opt,name=isDefault,proto3" json:"isDefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDefaultAppletReq) Reset() {
	*x = SetDefaultAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultAppletReq) ProtoMessage() {}

func (x *SetDefaultAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultAppletReq.ProtoReflect.Descriptor instead.
func (*SetDefaultAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{95}
}

func (x *SetDefaultAppletReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *SetDefaultAppletReq) GetIsDefault() uint32 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

type SetDefaultAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDefault     uint32                 `protobuf:"varint,1,opt,name=isDefault,proto3" json:"isDefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDefaultAppletResp) Reset() {
	*x = SetDefaultAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultAppletResp) ProtoMessage() {}

func (x *SetDefaultAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultAppletResp.ProtoReflect.Descriptor instead.
func (*SetDefaultAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{96}
}

func (x *SetDefaultAppletResp) GetIsDefault() uint32 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

type GetAppletReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppID         string                 `protobuf:"bytes,1,opt,name=appID,proto3" json:"appID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAppletReq) Reset() {
	*x = GetAppletReq{}
	mi := &file_admin_admin_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppletReq) ProtoMessage() {}

func (x *GetAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppletReq.ProtoReflect.Descriptor instead.
func (*GetAppletReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{97}
}

func (x *GetAppletReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetAppletResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Applet        *common.AppletInfo     `protobuf:"bytes,1,opt,name=applet,proto3" json:"applet"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAppletResp) Reset() {
	*x = GetAppletResp{}
	mi := &file_admin_admin_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppletResp) ProtoMessage() {}

func (x *GetAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppletResp.ProtoReflect.Descriptor instead.
func (*GetAppletResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{98}
}

func (x *GetAppletResp) GetApplet() *common.AppletInfo {
	if x != nil {
		return x.Applet
	}
	return nil
}

type SetClientConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        map[string]string      `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetClientConfigReq) Reset() {
	*x = SetClientConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientConfigReq) ProtoMessage() {}

func (x *SetClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientConfigReq.ProtoReflect.Descriptor instead.
func (*SetClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{99}
}

func (x *SetClientConfigReq) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetClientConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetClientConfigResp) Reset() {
	*x = SetClientConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientConfigResp) ProtoMessage() {}

func (x *SetClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientConfigResp.ProtoReflect.Descriptor instead.
func (*SetClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{100}
}

type DelClientConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keys          []string               `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelClientConfigReq) Reset() {
	*x = DelClientConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelClientConfigReq) ProtoMessage() {}

func (x *DelClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelClientConfigReq.ProtoReflect.Descriptor instead.
func (*DelClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{101}
}

func (x *DelClientConfigReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DelClientConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelClientConfigResp) Reset() {
	*x = DelClientConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelClientConfigResp) ProtoMessage() {}

func (x *DelClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelClientConfigResp.ProtoReflect.Descriptor instead.
func (*DelClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{102}
}

type GetClientConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClientConfigReq) Reset() {
	*x = GetClientConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientConfigReq) ProtoMessage() {}

func (x *GetClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientConfigReq.ProtoReflect.Descriptor instead.
func (*GetClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{103}
}

type GetListClientConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetListClientConfigReq) Reset() {
	*x = GetListClientConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListClientConfigReq) ProtoMessage() {}

func (x *GetListClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListClientConfigReq.ProtoReflect.Descriptor instead.
func (*GetListClientConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{104}
}

type ClientConfigOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientConfigOption) Reset() {
	*x = ClientConfigOption{}
	mi := &file_admin_admin_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientConfigOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfigOption) ProtoMessage() {}

func (x *ClientConfigOption) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfigOption.ProtoReflect.Descriptor instead.
func (*ClientConfigOption) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{105}
}

func (x *ClientConfigOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ClientConfigOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ClientConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	Label         string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	Options       []*ClientConfigOption  `protobuf:"bytes,5,rep,name=options,proto3" json:"options"`
	Desc          string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientConfig) Reset() {
	*x = ClientConfig{}
	mi := &file_admin_admin_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfig) ProtoMessage() {}

func (x *ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfig.ProtoReflect.Descriptor instead.
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{106}
}

func (x *ClientConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ClientConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ClientConfig) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ClientConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClientConfig) GetOptions() []*ClientConfigOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ClientConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type GetListClientConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Configs       []*ClientConfig        `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetListClientConfigResp) Reset() {
	*x = GetListClientConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetListClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListClientConfigResp) ProtoMessage() {}

func (x *GetListClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListClientConfigResp.ProtoReflect.Descriptor instead.
func (*GetListClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{107}
}

func (x *GetListClientConfigResp) GetConfigs() []*ClientConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type GetClientConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        map[string]string      `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClientConfigResp) Reset() {
	*x = GetClientConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientConfigResp) ProtoMessage() {}

func (x *GetClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientConfigResp.ProtoReflect.Descriptor instead.
func (*GetClientConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{108}
}

func (x *GetClientConfigResp) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetUserTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTokenReq) Reset() {
	*x = GetUserTokenReq{}
	mi := &file_admin_admin_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenReq) ProtoMessage() {}

func (x *GetUserTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenReq.ProtoReflect.Descriptor instead.
func (*GetUserTokenReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{109}
}

func (x *GetUserTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserTokenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokensMap     map[string]int32       `protobuf:"bytes,1,rep,name=tokensMap,proto3" json:"tokensMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTokenResp) Reset() {
	*x = GetUserTokenResp{}
	mi := &file_admin_admin_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenResp) ProtoMessage() {}

func (x *GetUserTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenResp.ProtoReflect.Descriptor instead.
func (*GetUserTokenResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{110}
}

func (x *GetUserTokenResp) GetTokensMap() map[string]int32 {
	if x != nil {
		return x.TokensMap
	}
	return nil
}

type LatestApplicationVersionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Platform      string                 `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestApplicationVersionReq) Reset() {
	*x = LatestApplicationVersionReq{}
	mi := &file_admin_admin_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestApplicationVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestApplicationVersionReq) ProtoMessage() {}

func (x *LatestApplicationVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestApplicationVersionReq.ProtoReflect.Descriptor instead.
func (*LatestApplicationVersionReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{111}
}

func (x *LatestApplicationVersionReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *LatestApplicationVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type LatestApplicationVersionResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Version       *common.ApplicationVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestApplicationVersionResp) Reset() {
	*x = LatestApplicationVersionResp{}
	mi := &file_admin_admin_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestApplicationVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestApplicationVersionResp) ProtoMessage() {}

func (x *LatestApplicationVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestApplicationVersionResp.ProtoReflect.Descriptor instead.
func (*LatestApplicationVersionResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{112}
}

func (x *LatestApplicationVersionResp) GetVersion() *common.ApplicationVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type AddApplicationVersionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Platform      string                 `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
	Text          string                 `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	Force         bool                   `protobuf:"varint,5,opt,name=force,proto3" json:"force"`
	Latest        bool                   `protobuf:"varint,6,opt,name=latest,proto3" json:"latest"`
	Hot           bool                   `protobuf:"varint,7,opt,name=hot,proto3" json:"hot"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddApplicationVersionReq) Reset() {
	*x = AddApplicationVersionReq{}
	mi := &file_admin_admin_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddApplicationVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddApplicationVersionReq) ProtoMessage() {}

func (x *AddApplicationVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddApplicationVersionReq.ProtoReflect.Descriptor instead.
func (*AddApplicationVersionReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{113}
}

func (x *AddApplicationVersionReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AddApplicationVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddApplicationVersionReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddApplicationVersionReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AddApplicationVersionReq) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *AddApplicationVersionReq) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

func (x *AddApplicationVersionReq) GetHot() bool {
	if x != nil {
		return x.Hot
	}
	return false
}

type AddApplicationVersionResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddApplicationVersionResp) Reset() {
	*x = AddApplicationVersionResp{}
	mi := &file_admin_admin_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddApplicationVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddApplicationVersionResp) ProtoMessage() {}

func (x *AddApplicationVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddApplicationVersionResp.ProtoReflect.Descriptor instead.
func (*AddApplicationVersionResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{114}
}

type UpdateApplicationVersionReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Platform      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform"`
	Version       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=url,proto3" json:"url"`
	Text          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=text,proto3" json:"text"`
	Force         *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=force,proto3" json:"force"`
	Latest        *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=latest,proto3" json:"latest"`
	Hot           *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=hot,proto3" json:"hot"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationVersionReq) Reset() {
	*x = UpdateApplicationVersionReq{}
	mi := &file_admin_admin_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationVersionReq) ProtoMessage() {}

func (x *UpdateApplicationVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationVersionReq.ProtoReflect.Descriptor instead.
func (*UpdateApplicationVersionReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateApplicationVersionReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationVersionReq) GetPlatform() *wrapperspb.StringValue {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *UpdateApplicationVersionReq) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *UpdateApplicationVersionReq) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UpdateApplicationVersionReq) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UpdateApplicationVersionReq) GetForce() *wrapperspb.BoolValue {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *UpdateApplicationVersionReq) GetLatest() *wrapperspb.BoolValue {
	if x != nil {
		return x.Latest
	}
	return nil
}

func (x *UpdateApplicationVersionReq) GetHot() *wrapperspb.BoolValue {
	if x != nil {
		return x.Hot
	}
	return nil
}

type UpdateApplicationVersionResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationVersionResp) Reset() {
	*x = UpdateApplicationVersionResp{}
	mi := &file_admin_admin_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationVersionResp) ProtoMessage() {}

func (x *UpdateApplicationVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationVersionResp.ProtoReflect.Descriptor instead.
func (*UpdateApplicationVersionResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{116}
}

type DeleteApplicationVersionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []string               `protobuf:"bytes,1,rep,name=id,proto3" json:"id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationVersionReq) Reset() {
	*x = DeleteApplicationVersionReq{}
	mi := &file_admin_admin_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationVersionReq) ProtoMessage() {}

func (x *DeleteApplicationVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationVersionReq.ProtoReflect.Descriptor instead.
func (*DeleteApplicationVersionReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteApplicationVersionReq) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteApplicationVersionResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationVersionResp) Reset() {
	*x = DeleteApplicationVersionResp{}
	mi := &file_admin_admin_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationVersionResp) ProtoMessage() {}

func (x *DeleteApplicationVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationVersionResp.ProtoReflect.Descriptor instead.
func (*DeleteApplicationVersionResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{118}
}

type PageApplicationVersionReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Platform      []string                 `protobuf:"bytes,1,rep,name=platform,proto3" json:"platform"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageApplicationVersionReq) Reset() {
	*x = PageApplicationVersionReq{}
	mi := &file_admin_admin_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageApplicationVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageApplicationVersionReq) ProtoMessage() {}

func (x *PageApplicationVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageApplicationVersionReq.ProtoReflect.Descriptor instead.
func (*PageApplicationVersionReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{119}
}

func (x *PageApplicationVersionReq) GetPlatform() []string {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *PageApplicationVersionReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type PageApplicationVersionResp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Total         int64                        `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Versions      []*common.ApplicationVersion `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageApplicationVersionResp) Reset() {
	*x = PageApplicationVersionResp{}
	mi := &file_admin_admin_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageApplicationVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageApplicationVersionResp) ProtoMessage() {}

func (x *PageApplicationVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageApplicationVersionResp.ProtoReflect.Descriptor instead.
func (*PageApplicationVersionResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{120}
}

func (x *PageApplicationVersionResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageApplicationVersionResp) GetVersions() []*common.ApplicationVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type GetGoogleAuthReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGoogleAuthReq) Reset() {
	*x = GetGoogleAuthReq{}
	mi := &file_admin_admin_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGoogleAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoogleAuthReq) ProtoMessage() {}

func (x *GetGoogleAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoogleAuthReq.ProtoReflect.Descriptor instead.
func (*GetGoogleAuthReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{121}
}

type GetGoogleAuthResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Secret        string                 `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret"`
	QrCodeUrl     string                 `protobuf:"bytes,2,opt,name=qrCodeUrl,proto3" json:"qrCodeUrl"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGoogleAuthResp) Reset() {
	*x = GetGoogleAuthResp{}
	mi := &file_admin_admin_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGoogleAuthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoogleAuthResp) ProtoMessage() {}

func (x *GetGoogleAuthResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoogleAuthResp.ProtoReflect.Descriptor instead.
func (*GetGoogleAuthResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{122}
}

func (x *GetGoogleAuthResp) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *GetGoogleAuthResp) GetQrCodeUrl() string {
	if x != nil {
		return x.QrCodeUrl
	}
	return ""
}

type VerifyGoogleAuthReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyGoogleAuthReq) Reset() {
	*x = VerifyGoogleAuthReq{}
	mi := &file_admin_admin_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyGoogleAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyGoogleAuthReq) ProtoMessage() {}

func (x *VerifyGoogleAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyGoogleAuthReq.ProtoReflect.Descriptor instead.
func (*VerifyGoogleAuthReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{123}
}

func (x *VerifyGoogleAuthReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type VerifyGoogleAuthResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyGoogleAuthResp) Reset() {
	*x = VerifyGoogleAuthResp{}
	mi := &file_admin_admin_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyGoogleAuthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyGoogleAuthResp) ProtoMessage() {}

func (x *VerifyGoogleAuthResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyGoogleAuthResp.ProtoReflect.Descriptor instead.
func (*VerifyGoogleAuthResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{124}
}

type GetUserLoginRecordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserLoginRecordReq) Reset() {
	*x = GetUserLoginRecordReq{}
	mi := &file_admin_admin_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserLoginRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLoginRecordReq) ProtoMessage() {}

func (x *GetUserLoginRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLoginRecordReq.ProtoReflect.Descriptor instead.
func (*GetUserLoginRecordReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{125}
}

type UserLoginRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	IP            string                 `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP"`
	DeviceName    string                 `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName"`
	DeviceID      string                 `protobuf:"bytes,4,opt,name=deviceID,proto3" json:"deviceID"`
	Platform      string                 `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform"`
	LoginTime     int64                  `protobuf:"varint,6,opt,name=loginTime,proto3" json:"loginTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoginRecord) Reset() {
	*x = UserLoginRecord{}
	mi := &file_admin_admin_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRecord) ProtoMessage() {}

func (x *UserLoginRecord) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRecord.ProtoReflect.Descriptor instead.
func (*UserLoginRecord) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{126}
}

func (x *UserLoginRecord) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserLoginRecord) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *UserLoginRecord) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *UserLoginRecord) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *UserLoginRecord) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserLoginRecord) GetLoginTime() int64 {
	if x != nil {
		return x.LoginTime
	}
	return 0
}

type GetUserLoginRecordResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*UserLoginRecord     `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserLoginRecordResp) Reset() {
	*x = GetUserLoginRecordResp{}
	mi := &file_admin_admin_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserLoginRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLoginRecordResp) ProtoMessage() {}

func (x *GetUserLoginRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLoginRecordResp.ProtoReflect.Descriptor instead.
func (*GetUserLoginRecordResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{127}
}

func (x *GetUserLoginRecordResp) GetRecords() []*UserLoginRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetSmsConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSmsConfigReq) Reset() {
	*x = GetSmsConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConfigReq) ProtoMessage() {}

func (x *GetSmsConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConfigReq.ProtoReflect.Descriptor instead.
func (*GetSmsConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{128}
}

type GetSmsConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        map[string]string      `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSmsConfigResp) Reset() {
	*x = GetSmsConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSmsConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSmsConfigResp) ProtoMessage() {}

func (x *GetSmsConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSmsConfigResp.ProtoReflect.Descriptor instead.
func (*GetSmsConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{129}
}

func (x *GetSmsConfigResp) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetSmsConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        map[string]string      `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSmsConfigReq) Reset() {
	*x = SetSmsConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSmsConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSmsConfigReq) ProtoMessage() {}

func (x *SetSmsConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSmsConfigReq.ProtoReflect.Descriptor instead.
func (*SetSmsConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{130}
}

func (x *SetSmsConfigReq) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetSmsConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSmsConfigResp) Reset() {
	*x = SetSmsConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSmsConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSmsConfigResp) ProtoMessage() {}

func (x *SetSmsConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSmsConfigResp.ProtoReflect.Descriptor instead.
func (*SetSmsConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{131}
}

type GetBucketConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBucketConfigReq) Reset() {
	*x = GetBucketConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBucketConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketConfigReq) ProtoMessage() {}

func (x *GetBucketConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketConfigReq.ProtoReflect.Descriptor instead.
func (*GetBucketConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{132}
}

type GetBucketConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        map[string]string      `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBucketConfigResp) Reset() {
	*x = GetBucketConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBucketConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketConfigResp) ProtoMessage() {}

func (x *GetBucketConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketConfigResp.ProtoReflect.Descriptor instead.
func (*GetBucketConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{133}
}

func (x *GetBucketConfigResp) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetBucketConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        map[string]string      `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetBucketConfigReq) Reset() {
	*x = SetBucketConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBucketConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBucketConfigReq) ProtoMessage() {}

func (x *SetBucketConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBucketConfigReq.ProtoReflect.Descriptor instead.
func (*SetBucketConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{134}
}

func (x *SetBucketConfigReq) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetBucketConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetBucketConfigResp) Reset() {
	*x = SetBucketConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBucketConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBucketConfigResp) ProtoMessage() {}

func (x *SetBucketConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBucketConfigResp.ProtoReflect.Descriptor instead.
func (*SetBucketConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{135}
}

type ContinueSigninConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Day           int32                  `protobuf:"varint,1,opt,name=day,proto3" json:"day"`
	Increment     int64                  `protobuf:"varint,2,opt,name=increment,proto3" json:"increment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContinueSigninConfig) Reset() {
	*x = ContinueSigninConfig{}
	mi := &file_admin_admin_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContinueSigninConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueSigninConfig) ProtoMessage() {}

func (x *ContinueSigninConfig) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueSigninConfig.ProtoReflect.Descriptor instead.
func (*ContinueSigninConfig) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{136}
}

func (x *ContinueSigninConfig) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ContinueSigninConfig) GetIncrement() int64 {
	if x != nil {
		return x.Increment
	}
	return 0
}

type SigninConfig struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	SigninType     string                  `protobuf:"bytes,1,opt,name=signin_type,json=signinType,proto3" json:"signin_type"`
	RandomMin      int32                   `protobuf:"varint,2,opt,name=random_min,json=randomMin,proto3" json:"random_min"`
	RandomMax      int32                   `protobuf:"varint,3,opt,name=random_max,json=randomMax,proto3" json:"random_max"`
	Rule           string                  `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule"`
	DailySignin    int64                   `protobuf:"varint,5,opt,name=daily_signin,json=dailySignin,proto3" json:"daily_signin"`
	ContinueSignin []*ContinueSigninConfig `protobuf:"bytes,6,rep,name=continue_signin,json=continueSignin,proto3" json:"continue_signin"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SigninConfig) Reset() {
	*x = SigninConfig{}
	mi := &file_admin_admin_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigninConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigninConfig) ProtoMessage() {}

func (x *SigninConfig) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigninConfig.ProtoReflect.Descriptor instead.
func (*SigninConfig) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{137}
}

func (x *SigninConfig) GetSigninType() string {
	if x != nil {
		return x.SigninType
	}
	return ""
}

func (x *SigninConfig) GetRandomMin() int32 {
	if x != nil {
		return x.RandomMin
	}
	return 0
}

func (x *SigninConfig) GetRandomMax() int32 {
	if x != nil {
		return x.RandomMax
	}
	return 0
}

func (x *SigninConfig) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *SigninConfig) GetDailySignin() int64 {
	if x != nil {
		return x.DailySignin
	}
	return 0
}

func (x *SigninConfig) GetContinueSignin() []*ContinueSigninConfig {
	if x != nil {
		return x.ContinueSignin
	}
	return nil
}

type SetSigninConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *SigninConfig          `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSigninConfigReq) Reset() {
	*x = SetSigninConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSigninConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSigninConfigReq) ProtoMessage() {}

func (x *SetSigninConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSigninConfigReq.ProtoReflect.Descriptor instead.
func (*SetSigninConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{138}
}

func (x *SetSigninConfigReq) GetConfig() *SigninConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetSigninConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSigninConfigResp) Reset() {
	*x = SetSigninConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSigninConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSigninConfigResp) ProtoMessage() {}

func (x *SetSigninConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSigninConfigResp.ProtoReflect.Descriptor instead.
func (*SetSigninConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{139}
}

type GetSigninConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSigninConfigReq) Reset() {
	*x = GetSigninConfigReq{}
	mi := &file_admin_admin_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSigninConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSigninConfigReq) ProtoMessage() {}

func (x *GetSigninConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSigninConfigReq.ProtoReflect.Descriptor instead.
func (*GetSigninConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{140}
}

type GetSigninConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *SigninConfig          `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSigninConfigResp) Reset() {
	*x = GetSigninConfigResp{}
	mi := &file_admin_admin_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSigninConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSigninConfigResp) ProtoMessage() {}

func (x *GetSigninConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSigninConfigResp.ProtoReflect.Descriptor instead.
func (*GetSigninConfigResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{141}
}

func (x *GetSigninConfigResp) GetConfig() *SigninConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetAdminMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAdminMenuReq) Reset() {
	*x = GetAdminMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminMenuReq) ProtoMessage() {}

func (x *GetAdminMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminMenuReq.ProtoReflect.Descriptor instead.
func (*GetAdminMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{142}
}

type GetAdminMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menus         []*common.AdminMenu    `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAdminMenuResp) Reset() {
	*x = GetAdminMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminMenuResp) ProtoMessage() {}

func (x *GetAdminMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminMenuResp.ProtoReflect.Descriptor instead.
func (*GetAdminMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{143}
}

func (x *GetAdminMenuResp) GetMenus() []*common.AdminMenu {
	if x != nil {
		return x.Menus
	}
	return nil
}

type CreateAdminMenuReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Path          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	Component     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=component,proto3" json:"component"`
	Icon          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon"`
	Sort          *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort"`
	Parent        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent"`
	Layout        *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=layout,proto3" json:"layout"`
	HiddenInMenu  *wrapperspb.BoolValue   `protobuf:"bytes,9,opt,name=hiddenInMenu,proto3" json:"hiddenInMenu"`
	Redirect      *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=redirect,proto3" json:"redirect"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAdminMenuReq) Reset() {
	*x = CreateAdminMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdminMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdminMenuReq) ProtoMessage() {}

func (x *CreateAdminMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdminMenuReq.ProtoReflect.Descriptor instead.
func (*CreateAdminMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{144}
}

func (x *CreateAdminMenuReq) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateAdminMenuReq) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CreateAdminMenuReq) GetComponent() *wrapperspb.StringValue {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *CreateAdminMenuReq) GetIcon() *wrapperspb.StringValue {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CreateAdminMenuReq) GetSort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CreateAdminMenuReq) GetParent() *wrapperspb.StringValue {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CreateAdminMenuReq) GetLayout() *wrapperspb.BoolValue {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *CreateAdminMenuReq) GetHiddenInMenu() *wrapperspb.BoolValue {
	if x != nil {
		return x.HiddenInMenu
	}
	return nil
}

func (x *CreateAdminMenuReq) GetRedirect() *wrapperspb.StringValue {
	if x != nil {
		return x.Redirect
	}
	return nil
}

type CreateAdminMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAdminMenuResp) Reset() {
	*x = CreateAdminMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdminMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdminMenuResp) ProtoMessage() {}

func (x *CreateAdminMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdminMenuResp.ProtoReflect.Descriptor instead.
func (*CreateAdminMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{145}
}

type UpdateAdminMenuReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Key           string                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Path          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	Component     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=component,proto3" json:"component"`
	Icon          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon"`
	Sort          *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort"`
	Parent        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent"`
	Layout        *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=layout,proto3" json:"layout"`
	HiddenInMenu  *wrapperspb.BoolValue   `protobuf:"bytes,9,opt,name=hiddenInMenu,proto3" json:"hiddenInMenu"`
	Redirect      *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=redirect,proto3" json:"redirect"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAdminMenuReq) Reset() {
	*x = UpdateAdminMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdminMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminMenuReq) ProtoMessage() {}

func (x *UpdateAdminMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminMenuReq.ProtoReflect.Descriptor instead.
func (*UpdateAdminMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{146}
}

func (x *UpdateAdminMenuReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateAdminMenuReq) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetComponent() *wrapperspb.StringValue {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetIcon() *wrapperspb.StringValue {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetSort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetParent() *wrapperspb.StringValue {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetLayout() *wrapperspb.BoolValue {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetHiddenInMenu() *wrapperspb.BoolValue {
	if x != nil {
		return x.HiddenInMenu
	}
	return nil
}

func (x *UpdateAdminMenuReq) GetRedirect() *wrapperspb.StringValue {
	if x != nil {
		return x.Redirect
	}
	return nil
}

type UpdateAdminMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAdminMenuResp) Reset() {
	*x = UpdateAdminMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdminMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminMenuResp) ProtoMessage() {}

func (x *UpdateAdminMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminMenuResp.ProtoReflect.Descriptor instead.
func (*UpdateAdminMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{147}
}

type DeleteAdminMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keys          []string               `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAdminMenuReq) Reset() {
	*x = DeleteAdminMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdminMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminMenuReq) ProtoMessage() {}

func (x *DeleteAdminMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminMenuReq.ProtoReflect.Descriptor instead.
func (*DeleteAdminMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{148}
}

func (x *DeleteAdminMenuReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DeleteAdminMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAdminMenuResp) Reset() {
	*x = DeleteAdminMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdminMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminMenuResp) ProtoMessage() {}

func (x *DeleteAdminMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminMenuResp.ProtoReflect.Descriptor instead.
func (*DeleteAdminMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{149}
}

type TakeAdminMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeAdminMenuReq) Reset() {
	*x = TakeAdminMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeAdminMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeAdminMenuReq) ProtoMessage() {}

func (x *TakeAdminMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeAdminMenuReq.ProtoReflect.Descriptor instead.
func (*TakeAdminMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{150}
}

func (x *TakeAdminMenuReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type TakeAdminMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menu          *common.AdminMenu      `protobuf:"bytes,1,opt,name=menu,proto3" json:"menu"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeAdminMenuResp) Reset() {
	*x = TakeAdminMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeAdminMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeAdminMenuResp) ProtoMessage() {}

func (x *TakeAdminMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeAdminMenuResp.ProtoReflect.Descriptor instead.
func (*TakeAdminMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{151}
}

func (x *TakeAdminMenuResp) GetMenu() *common.AdminMenu {
	if x != nil {
		return x.Menu
	}
	return nil
}

type ListAdminMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parent        string                 `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAdminMenuReq) Reset() {
	*x = ListAdminMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdminMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminMenuReq) ProtoMessage() {}

func (x *ListAdminMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminMenuReq.ProtoReflect.Descriptor instead.
func (*ListAdminMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{152}
}

func (x *ListAdminMenuReq) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListAdminMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menus         []*common.AdminMenu    `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAdminMenuResp) Reset() {
	*x = ListAdminMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdminMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminMenuResp) ProtoMessage() {}

func (x *ListAdminMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminMenuResp.ProtoReflect.Descriptor instead.
func (*ListAdminMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{153}
}

func (x *ListAdminMenuResp) GetMenus() []*common.AdminMenu {
	if x != nil {
		return x.Menus
	}
	return nil
}

type ListAdminUserMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAdminUserMenuReq) Reset() {
	*x = ListAdminUserMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdminUserMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminUserMenuReq) ProtoMessage() {}

func (x *ListAdminUserMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminUserMenuReq.ProtoReflect.Descriptor instead.
func (*ListAdminUserMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{154}
}

func (x *ListAdminUserMenuReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ListAdminUserMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menus         []*common.AdminMenu    `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAdminUserMenuResp) Reset() {
	*x = ListAdminUserMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdminUserMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminUserMenuResp) ProtoMessage() {}

func (x *ListAdminUserMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminUserMenuResp.ProtoReflect.Descriptor instead.
func (*ListAdminUserMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{155}
}

func (x *ListAdminUserMenuResp) GetMenus() []*common.AdminMenu {
	if x != nil {
		return x.Menus
	}
	return nil
}

type GetAdminUserMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAdminUserMenuReq) Reset() {
	*x = GetAdminUserMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminUserMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUserMenuReq) ProtoMessage() {}

func (x *GetAdminUserMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUserMenuReq.ProtoReflect.Descriptor instead.
func (*GetAdminUserMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{156}
}

func (x *GetAdminUserMenuReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetAdminUserMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menus         []*common.AdminMenu    `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAdminUserMenuResp) Reset() {
	*x = GetAdminUserMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAdminUserMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminUserMenuResp) ProtoMessage() {}

func (x *GetAdminUserMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminUserMenuResp.ProtoReflect.Descriptor instead.
func (*GetAdminUserMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{157}
}

func (x *GetAdminUserMenuResp) GetMenus() []*common.AdminMenu {
	if x != nil {
		return x.Menus
	}
	return nil
}

type AssignAdminUserMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Menus         []string               `protobuf:"bytes,2,rep,name=menus,proto3" json:"menus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignAdminUserMenuReq) Reset() {
	*x = AssignAdminUserMenuReq{}
	mi := &file_admin_admin_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignAdminUserMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignAdminUserMenuReq) ProtoMessage() {}

func (x *AssignAdminUserMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignAdminUserMenuReq.ProtoReflect.Descriptor instead.
func (*AssignAdminUserMenuReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{158}
}

func (x *AssignAdminUserMenuReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AssignAdminUserMenuReq) GetMenus() []string {
	if x != nil {
		return x.Menus
	}
	return nil
}

type AssignAdminUserMenuResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignAdminUserMenuResp) Reset() {
	*x = AssignAdminUserMenuResp{}
	mi := &file_admin_admin_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignAdminUserMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignAdminUserMenuResp) ProtoMessage() {}

func (x *AssignAdminUserMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignAdminUserMenuResp.ProtoReflect.Descriptor instead.
func (*AssignAdminUserMenuResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{159}
}

type SearchOperationLogReq struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Keyword       string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination    *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchOperationLogReq) Reset() {
	*x = SearchOperationLogReq{}
	mi := &file_admin_admin_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchOperationLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationLogReq) ProtoMessage() {}

func (x *SearchOperationLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationLogReq.ProtoReflect.Descriptor instead.
func (*SearchOperationLogReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{160}
}

func (x *SearchOperationLogReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchOperationLogReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchOperationLogResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Logs          []*common.OperationLog `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchOperationLogResp) Reset() {
	*x = SearchOperationLogResp{}
	mi := &file_admin_admin_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchOperationLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationLogResp) ProtoMessage() {}

func (x *SearchOperationLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationLogResp.ProtoReflect.Descriptor instead.
func (*SearchOperationLogResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{161}
}

func (x *SearchOperationLogResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchOperationLogResp) GetLogs() []*common.OperationLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type GetOperationLogReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperationID   string                 `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOperationLogReq) Reset() {
	*x = GetOperationLogReq{}
	mi := &file_admin_admin_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationLogReq) ProtoMessage() {}

func (x *GetOperationLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationLogReq.ProtoReflect.Descriptor instead.
func (*GetOperationLogReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{162}
}

func (x *GetOperationLogReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetOperationLogResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Log           *common.OperationLog   `protobuf:"bytes,1,opt,name=log,proto3" json:"log"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOperationLogResp) Reset() {
	*x = GetOperationLogResp{}
	mi := &file_admin_admin_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationLogResp) ProtoMessage() {}

func (x *GetOperationLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationLogResp.ProtoReflect.Descriptor instead.
func (*GetOperationLogResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{163}
}

func (x *GetOperationLogResp) GetLog() *common.OperationLog {
	if x != nil {
		return x.Log
	}
	return nil
}

type DeleteOperationLogReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperationIDs  []string               `protobuf:"bytes,1,rep,name=operationIDs,proto3" json:"operationIDs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOperationLogReq) Reset() {
	*x = DeleteOperationLogReq{}
	mi := &file_admin_admin_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOperationLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOperationLogReq) ProtoMessage() {}

func (x *DeleteOperationLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOperationLogReq.ProtoReflect.Descriptor instead.
func (*DeleteOperationLogReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{164}
}

func (x *DeleteOperationLogReq) GetOperationIDs() []string {
	if x != nil {
		return x.OperationIDs
	}
	return nil
}

type DeleteOperationLogResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOperationLogResp) Reset() {
	*x = DeleteOperationLogResp{}
	mi := &file_admin_admin_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOperationLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOperationLogResp) ProtoMessage() {}

func (x *DeleteOperationLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOperationLogResp.ProtoReflect.Descriptor instead.
func (*DeleteOperationLogResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{165}
}

type CreateOperationLogReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperationID   string                 `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID"`
	AdminID       string                 `protobuf:"bytes,2,opt,name=adminID,proto3" json:"adminID"`
	AdminAccount  string                 `protobuf:"bytes,3,opt,name=adminAccount,proto3" json:"adminAccount"`
	AdminName     string                 `protobuf:"bytes,4,opt,name=adminName,proto3" json:"adminName"`
	Module        string                 `protobuf:"bytes,5,opt,name=module,proto3" json:"module"`
	Operation     string                 `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation"`
	Method        string                 `protobuf:"bytes,7,opt,name=method,proto3" json:"method"`
	Path          string                 `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	IP            string                 `protobuf:"bytes,9,opt,name=IP,proto3" json:"IP"`
	RequestData   string                 `protobuf:"bytes,10,opt,name=requestData,proto3" json:"requestData"`
	CreateTime    int64                  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOperationLogReq) Reset() {
	*x = CreateOperationLogReq{}
	mi := &file_admin_admin_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOperationLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOperationLogReq) ProtoMessage() {}

func (x *CreateOperationLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOperationLogReq.ProtoReflect.Descriptor instead.
func (*CreateOperationLogReq) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{166}
}

func (x *CreateOperationLogReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CreateOperationLogReq) GetAdminID() string {
	if x != nil {
		return x.AdminID
	}
	return ""
}

func (x *CreateOperationLogReq) GetAdminAccount() string {
	if x != nil {
		return x.AdminAccount
	}
	return ""
}

func (x *CreateOperationLogReq) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *CreateOperationLogReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *CreateOperationLogReq) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *CreateOperationLogReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CreateOperationLogReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateOperationLogReq) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *CreateOperationLogReq) GetRequestData() string {
	if x != nil {
		return x.RequestData
	}
	return ""
}

func (x *CreateOperationLogReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateOperationLogResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOperationLogResp) Reset() {
	*x = CreateOperationLogResp{}
	mi := &file_admin_admin_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOperationLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOperationLogResp) ProtoMessage() {}

func (x *CreateOperationLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_admin_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOperationLogResp.ProtoReflect.Descriptor instead.
func (*CreateOperationLogResp) Descriptor() ([]byte, []int) {
	return file_admin_admin_proto_rawDescGZIP(), []int{167}
}

var File_admin_admin_proto protoreflect.FileDescriptor

var file_admin_admin_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x70, 0x62, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x63, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x2f, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x22, 0x7c, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x65, 0x6e,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x2f,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0x16, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x16, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x22, 0x31, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x73, 0x0a, 0x16, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x17, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x30, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x22, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x72, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73,
	0x22, 0x2c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2d, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x2c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a,
	0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36,
	0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x22, 0x50, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x50, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x0a,
	0x0b, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x73,
	0x22, 0x51, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x40, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x45,
	0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3e, 0x0a,
	0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x0f, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2a,
	0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6f, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7,
	0x02, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x77, 0x0a, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x44, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc2, 0x01, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x96, 0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0f,
	0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x22,
	0x4a, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x0f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x10, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x49, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x24,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x28, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x14, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22, 0x40, 0x0a,
	0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb0, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x1b, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a,
	0x1c, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb6, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x22, 0x1e, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x0a, 0x19,
	0x50, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x1a, 0x50, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x12,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x29, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x11,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x14, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d,
	0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22, 0x49, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x6d,
	0x65, 0x6e, 0x75, 0x73, 0x22, 0xfb, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8d, 0x04, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x28, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x24, 0x0a, 0x10, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x11, 0x54, 0x61, 0x6b, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x22,
	0x2a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x33, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05,
	0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x6d, 0x65,
	0x6e, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x65,
	0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22,
	0x46, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x72, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x36, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x03, 0x6c,
	0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22,
	0x3b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc9, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0xc3, 0x35, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x53, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x59, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5f, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x49,
	0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x50,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x56, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x71, 0x0a, 0x18, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x71, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x71, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x16, 0x50, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_admin_proto_rawDescOnce sync.Once
	file_admin_admin_proto_rawDescData = file_admin_admin_proto_rawDesc
)

func file_admin_admin_proto_rawDescGZIP() []byte {
	file_admin_admin_proto_rawDescOnce.Do(func() {
		file_admin_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_admin_proto_rawDescData)
	})
	return file_admin_admin_proto_rawDescData
}

var file_admin_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 175)
var file_admin_admin_proto_goTypes = []any{
	(*LoginReq)(nil),                     // 0: openim.admin.LoginReq
	(*LoginResp)(nil),                    // 1: openim.admin.LoginResp
	(*AddAdminAccountReq)(nil),           // 2: openim.admin.AddAdminAccountReq
	(*AddAdminAccountResp)(nil),          // 3: openim.admin.AddAdminAccountResp
	(*AdminUpdateInfoReq)(nil),           // 4: openim.admin.AdminUpdateInfoReq
	(*AdminUpdateInfoResp)(nil),          // 5: openim.admin.AdminUpdateInfoResp
	(*ChangePasswordReq)(nil),            // 6: openim.admin.ChangePasswordReq
	(*ChangePasswordResp)(nil),           // 7: openim.admin.ChangePasswordResp
	(*GetAdminInfoReq)(nil),              // 8: openim.admin.GetAdminInfoReq
	(*ChangeAdminPasswordReq)(nil),       // 9: openim.admin.ChangeAdminPasswordReq
	(*ChangeAdminPasswordResp)(nil),      // 10: openim.admin.ChangeAdminPasswordResp
	(*DelAdminAccountReq)(nil),           // 11: openim.admin.DelAdminAccountReq
	(*DelAdminAccountResp)(nil),          // 12: openim.admin.DelAdminAccountResp
	(*SearchAdminAccountReq)(nil),        // 13: openim.admin.SearchAdminAccountReq
	(*SearchAdminAccountResp)(nil),       // 14: openim.admin.SearchAdminAccountResp
	(*GetAdminInfoResp)(nil),             // 15: openim.admin.GetAdminInfoResp
	(*AddDefaultFriendReq)(nil),          // 16: openim.admin.AddDefaultFriendReq
	(*AddDefaultFriendResp)(nil),         // 17: openim.admin.AddDefaultFriendResp
	(*DelDefaultFriendReq)(nil),          // 18: openim.admin.DelDefaultFriendReq
	(*DelDefaultFriendResp)(nil),         // 19: openim.admin.DelDefaultFriendResp
	(*FindDefaultFriendReq)(nil),         // 20: openim.admin.FindDefaultFriendReq
	(*FindDefaultFriendResp)(nil),        // 21: openim.admin.FindDefaultFriendResp
	(*SearchDefaultFriendReq)(nil),       // 22: openim.admin.SearchDefaultFriendReq
	(*DefaultFriendAttribute)(nil),       // 23: openim.admin.DefaultFriendAttribute
	(*SearchDefaultFriendResp)(nil),      // 24: openim.admin.SearchDefaultFriendResp
	(*AddDefaultGroupReq)(nil),           // 25: openim.admin.AddDefaultGroupReq
	(*AddDefaultGroupResp)(nil),          // 26: openim.admin.AddDefaultGroupResp
	(*DelDefaultGroupReq)(nil),           // 27: openim.admin.DelDefaultGroupReq
	(*DelDefaultGroupResp)(nil),          // 28: openim.admin.DelDefaultGroupResp
	(*FindDefaultGroupReq)(nil),          // 29: openim.admin.FindDefaultGroupReq
	(*FindDefaultGroupResp)(nil),         // 30: openim.admin.FindDefaultGroupResp
	(*SearchDefaultGroupReq)(nil),        // 31: openim.admin.SearchDefaultGroupReq
	(*GroupAttribute)(nil),               // 32: openim.admin.GroupAttribute
	(*SearchDefaultGroupResp)(nil),       // 33: openim.admin.SearchDefaultGroupResp
	(*AddInvitationCodeReq)(nil),         // 34: openim.admin.AddInvitationCodeReq
	(*AddInvitationCodeResp)(nil),        // 35: openim.admin.AddInvitationCodeResp
	(*GenInvitationCodeReq)(nil),         // 36: openim.admin.GenInvitationCodeReq
	(*GenInvitationCodeResp)(nil),        // 37: openim.admin.GenInvitationCodeResp
	(*FindInvitationCodeReq)(nil),        // 38: openim.admin.FindInvitationCodeReq
	(*FindInvitationCodeResp)(nil),       // 39: openim.admin.FindInvitationCodeResp
	(*UseInvitationCodeReq)(nil),         // 40: openim.admin.UseInvitationCodeReq
	(*UseInvitationCodeResp)(nil),        // 41: openim.admin.UseInvitationCodeResp
	(*DelInvitationCodeReq)(nil),         // 42: openim.admin.DelInvitationCodeReq
	(*DelInvitationCodeResp)(nil),        // 43: openim.admin.DelInvitationCodeResp
	(*InvitationRegister)(nil),           // 44: openim.admin.InvitationRegister
	(*SearchInvitationCodeReq)(nil),      // 45: openim.admin.SearchInvitationCodeReq
	(*SearchInvitationCodeResp)(nil),     // 46: openim.admin.SearchInvitationCodeResp
	(*SearchUserIPLimitLoginReq)(nil),    // 47: openim.admin.SearchUserIPLimitLoginReq
	(*LimitUserLoginIP)(nil),             // 48: openim.admin.LimitUserLoginIP
	(*SearchUserIPLimitLoginResp)(nil),   // 49: openim.admin.SearchUserIPLimitLoginResp
	(*UserIPLimitLogin)(nil),             // 50: openim.admin.UserIPLimitLogin
	(*AddUserIPLimitLoginReq)(nil),       // 51: openim.admin.AddUserIPLimitLoginReq
	(*AddUserIPLimitLoginResp)(nil),      // 52: openim.admin.AddUserIPLimitLoginResp
	(*DelUserIPLimitLoginReq)(nil),       // 53: openim.admin.DelUserIPLimitLoginReq
	(*DelUserIPLimitLoginResp)(nil),      // 54: openim.admin.DelUserIPLimitLoginResp
	(*IPForbidden)(nil),                  // 55: openim.admin.IPForbidden
	(*IPForbiddenAdd)(nil),               // 56: openim.admin.IPForbiddenAdd
	(*SearchIPForbiddenReq)(nil),         // 57: openim.admin.SearchIPForbiddenReq
	(*SearchIPForbiddenResp)(nil),        // 58: openim.admin.SearchIPForbiddenResp
	(*AddIPForbiddenReq)(nil),            // 59: openim.admin.AddIPForbiddenReq
	(*AddIPForbiddenResp)(nil),           // 60: openim.admin.AddIPForbiddenResp
	(*DelIPForbiddenReq)(nil),            // 61: openim.admin.DelIPForbiddenReq
	(*DelIPForbiddenResp)(nil),           // 62: openim.admin.DelIPForbiddenResp
	(*CheckRegisterForbiddenReq)(nil),    // 63: openim.admin.CheckRegisterForbiddenReq
	(*CheckRegisterForbiddenResp)(nil),   // 64: openim.admin.CheckRegisterForbiddenResp
	(*CheckLoginForbiddenReq)(nil),       // 65: openim.admin.CheckLoginForbiddenReq
	(*CheckLoginForbiddenResp)(nil),      // 66: openim.admin.CheckLoginForbiddenResp
	(*CancellationUserReq)(nil),          // 67: openim.admin.CancellationUserReq
	(*CancellationUserResp)(nil),         // 68: openim.admin.CancellationUserResp
	(*BlockUserReq)(nil),                 // 69: openim.admin.BlockUserReq
	(*BlockUserResp)(nil),                // 70: openim.admin.BlockUserResp
	(*UnblockUserReq)(nil),               // 71: openim.admin.UnblockUserReq
	(*UnblockUserResp)(nil),              // 72: openim.admin.UnblockUserResp
	(*SearchBlockUserReq)(nil),           // 73: openim.admin.SearchBlockUserReq
	(*BlockUserInfo)(nil),                // 74: openim.admin.BlockUserInfo
	(*SearchBlockUserResp)(nil),          // 75: openim.admin.SearchBlockUserResp
	(*FindUserBlockInfoReq)(nil),         // 76: openim.admin.FindUserBlockInfoReq
	(*BlockInfo)(nil),                    // 77: openim.admin.BlockInfo
	(*FindUserBlockInfoResp)(nil),        // 78: openim.admin.FindUserBlockInfoResp
	(*CreateTokenReq)(nil),               // 79: openim.admin.CreateTokenReq
	(*CreateTokenResp)(nil),              // 80: openim.admin.CreateTokenResp
	(*ParseTokenReq)(nil),                // 81: openim.admin.ParseTokenReq
	(*ParseTokenResp)(nil),               // 82: openim.admin.ParseTokenResp
	(*InvalidateTokenReq)(nil),           // 83: openim.admin.InvalidateTokenReq
	(*InvalidateTokenResp)(nil),          // 84: openim.admin.InvalidateTokenResp
	(*AddAppletReq)(nil),                 // 85: openim.admin.AddAppletReq
	(*AddAppletResp)(nil),                // 86: openim.admin.AddAppletResp
	(*DelAppletReq)(nil),                 // 87: openim.admin.DelAppletReq
	(*DelAppletResp)(nil),                // 88: openim.admin.DelAppletResp
	(*UpdateAppletReq)(nil),              // 89: openim.admin.UpdateAppletReq
	(*UpdateAppletResp)(nil),             // 90: openim.admin.UpdateAppletResp
	(*FindAppletReq)(nil),                // 91: openim.admin.FindAppletReq
	(*FindAppletResp)(nil),               // 92: openim.admin.FindAppletResp
	(*SearchAppletReq)(nil),              // 93: openim.admin.SearchAppletReq
	(*SearchAppletResp)(nil),             // 94: openim.admin.SearchAppletResp
	(*SetDefaultAppletReq)(nil),          // 95: openim.admin.SetDefaultAppletReq
	(*SetDefaultAppletResp)(nil),         // 96: openim.admin.SetDefaultAppletResp
	(*GetAppletReq)(nil),                 // 97: openim.admin.GetAppletReq
	(*GetAppletResp)(nil),                // 98: openim.admin.GetAppletResp
	(*SetClientConfigReq)(nil),           // 99: openim.admin.SetClientConfigReq
	(*SetClientConfigResp)(nil),          // 100: openim.admin.SetClientConfigResp
	(*DelClientConfigReq)(nil),           // 101: openim.admin.DelClientConfigReq
	(*DelClientConfigResp)(nil),          // 102: openim.admin.DelClientConfigResp
	(*GetClientConfigReq)(nil),           // 103: openim.admin.GetClientConfigReq
	(*GetListClientConfigReq)(nil),       // 104: openim.admin.GetListClientConfigReq
	(*ClientConfigOption)(nil),           // 105: openim.admin.ClientConfigOption
	(*ClientConfig)(nil),                 // 106: openim.admin.ClientConfig
	(*GetListClientConfigResp)(nil),      // 107: openim.admin.GetListClientConfigResp
	(*GetClientConfigResp)(nil),          // 108: openim.admin.GetClientConfigResp
	(*GetUserTokenReq)(nil),              // 109: openim.admin.GetUserTokenReq
	(*GetUserTokenResp)(nil),             // 110: openim.admin.GetUserTokenResp
	(*LatestApplicationVersionReq)(nil),  // 111: openim.admin.LatestApplicationVersionReq
	(*LatestApplicationVersionResp)(nil), // 112: openim.admin.LatestApplicationVersionResp
	(*AddApplicationVersionReq)(nil),     // 113: openim.admin.AddApplicationVersionReq
	(*AddApplicationVersionResp)(nil),    // 114: openim.admin.AddApplicationVersionResp
	(*UpdateApplicationVersionReq)(nil),  // 115: openim.admin.UpdateApplicationVersionReq
	(*UpdateApplicationVersionResp)(nil), // 116: openim.admin.UpdateApplicationVersionResp
	(*DeleteApplicationVersionReq)(nil),  // 117: openim.admin.DeleteApplicationVersionReq
	(*DeleteApplicationVersionResp)(nil), // 118: openim.admin.DeleteApplicationVersionResp
	(*PageApplicationVersionReq)(nil),    // 119: openim.admin.PageApplicationVersionReq
	(*PageApplicationVersionResp)(nil),   // 120: openim.admin.PageApplicationVersionResp
	(*GetGoogleAuthReq)(nil),             // 121: openim.admin.GetGoogleAuthReq
	(*GetGoogleAuthResp)(nil),            // 122: openim.admin.GetGoogleAuthResp
	(*VerifyGoogleAuthReq)(nil),          // 123: openim.admin.VerifyGoogleAuthReq
	(*VerifyGoogleAuthResp)(nil),         // 124: openim.admin.VerifyGoogleAuthResp
	(*GetUserLoginRecordReq)(nil),        // 125: openim.admin.GetUserLoginRecordReq
	(*UserLoginRecord)(nil),              // 126: openim.admin.UserLoginRecord
	(*GetUserLoginRecordResp)(nil),       // 127: openim.admin.GetUserLoginRecordResp
	(*GetSmsConfigReq)(nil),              // 128: openim.admin.GetSmsConfigReq
	(*GetSmsConfigResp)(nil),             // 129: openim.admin.GetSmsConfigResp
	(*SetSmsConfigReq)(nil),              // 130: openim.admin.SetSmsConfigReq
	(*SetSmsConfigResp)(nil),             // 131: openim.admin.SetSmsConfigResp
	(*GetBucketConfigReq)(nil),           // 132: openim.admin.GetBucketConfigReq
	(*GetBucketConfigResp)(nil),          // 133: openim.admin.GetBucketConfigResp
	(*SetBucketConfigReq)(nil),           // 134: openim.admin.SetBucketConfigReq
	(*SetBucketConfigResp)(nil),          // 135: openim.admin.SetBucketConfigResp
	(*ContinueSigninConfig)(nil),         // 136: openim.admin.ContinueSigninConfig
	(*SigninConfig)(nil),                 // 137: openim.admin.SigninConfig
	(*SetSigninConfigReq)(nil),           // 138: openim.admin.SetSigninConfigReq
	(*SetSigninConfigResp)(nil),          // 139: openim.admin.SetSigninConfigResp
	(*GetSigninConfigReq)(nil),           // 140: openim.admin.GetSigninConfigReq
	(*GetSigninConfigResp)(nil),          // 141: openim.admin.GetSigninConfigResp
	(*GetAdminMenuReq)(nil),              // 142: openim.admin.GetAdminMenuReq
	(*GetAdminMenuResp)(nil),             // 143: openim.admin.GetAdminMenuResp
	(*CreateAdminMenuReq)(nil),           // 144: openim.admin.CreateAdminMenuReq
	(*CreateAdminMenuResp)(nil),          // 145: openim.admin.CreateAdminMenuResp
	(*UpdateAdminMenuReq)(nil),           // 146: openim.admin.UpdateAdminMenuReq
	(*UpdateAdminMenuResp)(nil),          // 147: openim.admin.UpdateAdminMenuResp
	(*DeleteAdminMenuReq)(nil),           // 148: openim.admin.DeleteAdminMenuReq
	(*DeleteAdminMenuResp)(nil),          // 149: openim.admin.DeleteAdminMenuResp
	(*TakeAdminMenuReq)(nil),             // 150: openim.admin.TakeAdminMenuReq
	(*TakeAdminMenuResp)(nil),            // 151: openim.admin.TakeAdminMenuResp
	(*ListAdminMenuReq)(nil),             // 152: openim.admin.ListAdminMenuReq
	(*ListAdminMenuResp)(nil),            // 153: openim.admin.ListAdminMenuResp
	(*ListAdminUserMenuReq)(nil),         // 154: openim.admin.ListAdminUserMenuReq
	(*ListAdminUserMenuResp)(nil),        // 155: openim.admin.ListAdminUserMenuResp
	(*GetAdminUserMenuReq)(nil),          // 156: openim.admin.GetAdminUserMenuReq
	(*GetAdminUserMenuResp)(nil),         // 157: openim.admin.GetAdminUserMenuResp
	(*AssignAdminUserMenuReq)(nil),       // 158: openim.admin.AssignAdminUserMenuReq
	(*AssignAdminUserMenuResp)(nil),      // 159: openim.admin.AssignAdminUserMenuResp
	(*SearchOperationLogReq)(nil),        // 160: openim.admin.SearchOperationLogReq
	(*SearchOperationLogResp)(nil),       // 161: openim.admin.SearchOperationLogResp
	(*GetOperationLogReq)(nil),           // 162: openim.admin.GetOperationLogReq
	(*GetOperationLogResp)(nil),          // 163: openim.admin.GetOperationLogResp
	(*DeleteOperationLogReq)(nil),        // 164: openim.admin.DeleteOperationLogReq
	(*DeleteOperationLogResp)(nil),       // 165: openim.admin.DeleteOperationLogResp
	(*CreateOperationLogReq)(nil),        // 166: openim.admin.CreateOperationLogReq
	(*CreateOperationLogResp)(nil),       // 167: openim.admin.CreateOperationLogResp
	nil,                                  // 168: openim.admin.SetClientConfigReq.ConfigEntry
	nil,                                  // 169: openim.admin.GetClientConfigResp.ConfigEntry
	nil,                                  // 170: openim.admin.GetUserTokenResp.TokensMapEntry
	nil,                                  // 171: openim.admin.GetSmsConfigResp.ConfigEntry
	nil,                                  // 172: openim.admin.SetSmsConfigReq.ConfigEntry
	nil,                                  // 173: openim.admin.GetBucketConfigResp.ConfigEntry
	nil,                                  // 174: openim.admin.SetBucketConfigReq.ConfigEntry
	(*wrapperspb.StringValue)(nil),       // 175: openim.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),        // 176: openim.protobuf.Int32Value
	(*sdkws.RequestPagination)(nil),      // 177: openim.sdkws.RequestPagination
	(*common.AdminMenu)(nil),             // 178: openim.chat.common.AdminMenu
	(*common.UserPublicInfo)(nil),        // 179: openim.chat.common.UserPublicInfo
	(*sdkws.GroupInfo)(nil),              // 180: openim.sdkws.GroupInfo
	(*wrapperspb.UInt32Value)(nil),       // 181: openim.protobuf.UInt32Value
	(*wrapperspb.Int64Value)(nil),        // 182: openim.protobuf.Int64Value
	(*common.AppletInfo)(nil),            // 183: openim.chat.common.AppletInfo
	(*common.ApplicationVersion)(nil),    // 184: openim.chat.common.ApplicationVersion
	(*wrapperspb.BoolValue)(nil),         // 185: openim.protobuf.BoolValue
	(*common.OperationLog)(nil),          // 186: openim.chat.common.OperationLog
}
var file_admin_admin_proto_depIdxs = []int32{
	175, // 0: openim.admin.AdminUpdateInfoReq.account:type_name -> openim.protobuf.StringValue
	175, // 1: openim.admin.AdminUpdateInfoReq.password:type_name -> openim.protobuf.StringValue
	175, // 2: openim.admin.AdminUpdateInfoReq.faceURL:type_name -> openim.protobuf.StringValue
	175, // 3: openim.admin.AdminUpdateInfoReq.nickname:type_name -> openim.protobuf.StringValue
	176, // 4: openim.admin.AdminUpdateInfoReq.level:type_name -> openim.protobuf.Int32Value
	177, // 5: openim.admin.SearchAdminAccountReq.pagination:type_name -> openim.sdkws.RequestPagination
	15,  // 6: openim.admin.SearchAdminAccountResp.adminAccounts:type_name -> openim.admin.GetAdminInfoResp
	178, // 7: openim.admin.GetAdminInfoResp.menus:type_name -> openim.chat.common.AdminMenu
	177, // 8: openim.admin.SearchDefaultFriendReq.pagination:type_name -> openim.sdkws.RequestPagination
	179, // 9: openim.admin.DefaultFriendAttribute.user:type_name -> openim.chat.common.UserPublicInfo
	23,  // 10: openim.admin.SearchDefaultFriendResp.users:type_name -> openim.admin.DefaultFriendAttribute
	177, // 11: openim.admin.SearchDefaultGroupReq.pagination:type_name -> openim.sdkws.RequestPagination
	180, // 12: openim.admin.GroupAttribute.group:type_name -> openim.sdkws.GroupInfo
	44,  // 13: openim.admin.FindInvitationCodeResp.codes:type_name -> openim.admin.InvitationRegister
	179, // 14: openim.admin.InvitationRegister.usedUser:type_name -> openim.chat.common.UserPublicInfo
	177, // 15: openim.admin.SearchInvitationCodeReq.pagination:type_name -> openim.sdkws.RequestPagination
	44,  // 16: openim.admin.SearchInvitationCodeResp.list:type_name -> openim.admin.InvitationRegister
	177, // 17: openim.admin.SearchUserIPLimitLoginReq.pagination:type_name -> openim.sdkws.RequestPagination
	179, // 18: openim.admin.LimitUserLoginIP.user:type_name -> openim.chat.common.UserPublicInfo
	48,  // 19: openim.admin.SearchUserIPLimitLoginResp.limits:type_name -> openim.admin.LimitUserLoginIP
	50,  // 20: openim.admin.AddUserIPLimitLoginReq.limits:type_name -> openim.admin.UserIPLimitLogin
	50,  // 21: openim.admin.DelUserIPLimitLoginReq.limits:type_name -> openim.admin.UserIPLimitLogin
	177, // 22: openim.admin.SearchIPForbiddenReq.pagination:type_name -> openim.sdkws.RequestPagination
	55,  // 23: openim.admin.SearchIPForbiddenResp.forbiddens:type_name -> openim.admin.IPForbidden
	56,  // 24: openim.admin.AddIPForbiddenReq.forbiddens:type_name -> openim.admin.IPForbiddenAdd
	177, // 25: openim.admin.SearchBlockUserReq.pagination:type_name -> openim.sdkws.RequestPagination
	74,  // 26: openim.admin.SearchBlockUserResp.users:type_name -> openim.admin.BlockUserInfo
	77,  // 27: openim.admin.FindUserBlockInfoResp.blocks:type_name -> openim.admin.BlockInfo
	175, // 28: openim.admin.UpdateAppletReq.name:type_name -> openim.protobuf.StringValue
	175, // 29: openim.admin.UpdateAppletReq.appID:type_name -> openim.protobuf.StringValue
	175, // 30: openim.admin.UpdateAppletReq.icon:type_name -> openim.protobuf.StringValue
	175, // 31: openim.admin.UpdateAppletReq.url:type_name -> openim.protobuf.StringValue
	181, // 32: openim.admin.UpdateAppletReq.priority:type_name -> openim.protobuf.UInt32Value
	181, // 33: openim.admin.UpdateAppletReq.status:type_name -> openim.protobuf.UInt32Value
	182, // 34: openim.admin.UpdateAppletReq.createTime:type_name -> openim.protobuf.Int64Value
	183, // 35: openim.admin.FindAppletResp.applets:type_name -> openim.chat.common.AppletInfo
	177, // 36: openim.admin.SearchAppletReq.pagination:type_name -> openim.sdkws.RequestPagination
	183, // 37: openim.admin.SearchAppletResp.applets:type_name -> openim.chat.common.AppletInfo
	183, // 38: openim.admin.GetAppletResp.applet:type_name -> openim.chat.common.AppletInfo
	168, // 39: openim.admin.SetClientConfigReq.config:type_name -> openim.admin.SetClientConfigReq.ConfigEntry
	105, // 40: openim.admin.ClientConfig.options:type_name -> openim.admin.ClientConfigOption
	106, // 41: openim.admin.GetListClientConfigResp.configs:type_name -> openim.admin.ClientConfig
	169, // 42: openim.admin.GetClientConfigResp.config:type_name -> openim.admin.GetClientConfigResp.ConfigEntry
	170, // 43: openim.admin.GetUserTokenResp.tokensMap:type_name -> openim.admin.GetUserTokenResp.TokensMapEntry
	184, // 44: openim.admin.LatestApplicationVersionResp.version:type_name -> openim.chat.common.ApplicationVersion
	175, // 45: openim.admin.UpdateApplicationVersionReq.platform:type_name -> openim.protobuf.StringValue
	175, // 46: openim.admin.UpdateApplicationVersionReq.version:type_name -> openim.protobuf.StringValue
	175, // 47: openim.admin.UpdateApplicationVersionReq.url:type_name -> openim.protobuf.StringValue
	175, // 48: openim.admin.UpdateApplicationVersionReq.text:type_name -> openim.protobuf.StringValue
	185, // 49: openim.admin.UpdateApplicationVersionReq.force:type_name -> openim.protobuf.BoolValue
	185, // 50: openim.admin.UpdateApplicationVersionReq.latest:type_name -> openim.protobuf.BoolValue
	185, // 51: openim.admin.UpdateApplicationVersionReq.hot:type_name -> openim.protobuf.BoolValue
	177, // 52: openim.admin.PageApplicationVersionReq.pagination:type_name -> openim.sdkws.RequestPagination
	184, // 53: openim.admin.PageApplicationVersionResp.versions:type_name -> openim.chat.common.ApplicationVersion
	126, // 54: openim.admin.GetUserLoginRecordResp.records:type_name -> openim.admin.UserLoginRecord
	171, // 55: openim.admin.GetSmsConfigResp.config:type_name -> openim.admin.GetSmsConfigResp.ConfigEntry
	172, // 56: openim.admin.SetSmsConfigReq.config:type_name -> openim.admin.SetSmsConfigReq.ConfigEntry
	173, // 57: openim.admin.GetBucketConfigResp.config:type_name -> openim.admin.GetBucketConfigResp.ConfigEntry
	174, // 58: openim.admin.SetBucketConfigReq.config:type_name -> openim.admin.SetBucketConfigReq.ConfigEntry
	136, // 59: openim.admin.SigninConfig.continue_signin:type_name -> openim.admin.ContinueSigninConfig
	137, // 60: openim.admin.SetSigninConfigReq.config:type_name -> openim.admin.SigninConfig
	137, // 61: openim.admin.GetSigninConfigResp.config:type_name -> openim.admin.SigninConfig
	178, // 62: openim.admin.GetAdminMenuResp.menus:type_name -> openim.chat.common.AdminMenu
	175, // 63: openim.admin.CreateAdminMenuReq.name:type_name -> openim.protobuf.StringValue
	175, // 64: openim.admin.CreateAdminMenuReq.path:type_name -> openim.protobuf.StringValue
	175, // 65: openim.admin.CreateAdminMenuReq.component:type_name -> openim.protobuf.StringValue
	175, // 66: openim.admin.CreateAdminMenuReq.icon:type_name -> openim.protobuf.StringValue
	176, // 67: openim.admin.CreateAdminMenuReq.sort:type_name -> openim.protobuf.Int32Value
	175, // 68: openim.admin.CreateAdminMenuReq.parent:type_name -> openim.protobuf.StringValue
	185, // 69: openim.admin.CreateAdminMenuReq.layout:type_name -> openim.protobuf.BoolValue
	185, // 70: openim.admin.CreateAdminMenuReq.hiddenInMenu:type_name -> openim.protobuf.BoolValue
	175, // 71: openim.admin.CreateAdminMenuReq.redirect:type_name -> openim.protobuf.StringValue
	175, // 72: openim.admin.UpdateAdminMenuReq.name:type_name -> openim.protobuf.StringValue
	175, // 73: openim.admin.UpdateAdminMenuReq.path:type_name -> openim.protobuf.StringValue
	175, // 74: openim.admin.UpdateAdminMenuReq.component:type_name -> openim.protobuf.StringValue
	175, // 75: openim.admin.UpdateAdminMenuReq.icon:type_name -> openim.protobuf.StringValue
	176, // 76: openim.admin.UpdateAdminMenuReq.sort:type_name -> openim.protobuf.Int32Value
	175, // 77: openim.admin.UpdateAdminMenuReq.parent:type_name -> openim.protobuf.StringValue
	185, // 78: openim.admin.UpdateAdminMenuReq.layout:type_name -> openim.protobuf.BoolValue
	185, // 79: openim.admin.UpdateAdminMenuReq.hiddenInMenu:type_name -> openim.protobuf.BoolValue
	175, // 80: openim.admin.UpdateAdminMenuReq.redirect:type_name -> openim.protobuf.StringValue
	178, // 81: openim.admin.TakeAdminMenuResp.menu:type_name -> openim.chat.common.AdminMenu
	178, // 82: openim.admin.ListAdminMenuResp.menus:type_name -> openim.chat.common.AdminMenu
	178, // 83: openim.admin.ListAdminUserMenuResp.menus:type_name -> openim.chat.common.AdminMenu
	178, // 84: openim.admin.GetAdminUserMenuResp.menus:type_name -> openim.chat.common.AdminMenu
	177, // 85: openim.admin.SearchOperationLogReq.pagination:type_name -> openim.sdkws.RequestPagination
	186, // 86: openim.admin.SearchOperationLogResp.logs:type_name -> openim.chat.common.OperationLog
	186, // 87: openim.admin.GetOperationLogResp.log:type_name -> openim.chat.common.OperationLog
	0,   // 88: openim.admin.admin.Login:input_type -> openim.admin.LoginReq
	6,   // 89: openim.admin.admin.ChangePassword:input_type -> openim.admin.ChangePasswordReq
	4,   // 90: openim.admin.admin.AdminUpdateInfo:input_type -> openim.admin.AdminUpdateInfoReq
	8,   // 91: openim.admin.admin.GetAdminInfo:input_type -> openim.admin.GetAdminInfoReq
	2,   // 92: openim.admin.admin.AddAdminAccount:input_type -> openim.admin.AddAdminAccountReq
	9,   // 93: openim.admin.admin.ChangeAdminPassword:input_type -> openim.admin.ChangeAdminPasswordReq
	11,  // 94: openim.admin.admin.DelAdminAccount:input_type -> openim.admin.DelAdminAccountReq
	13,  // 95: openim.admin.admin.SearchAdminAccount:input_type -> openim.admin.SearchAdminAccountReq
	16,  // 96: openim.admin.admin.AddDefaultFriend:input_type -> openim.admin.AddDefaultFriendReq
	18,  // 97: openim.admin.admin.DelDefaultFriend:input_type -> openim.admin.DelDefaultFriendReq
	20,  // 98: openim.admin.admin.FindDefaultFriend:input_type -> openim.admin.FindDefaultFriendReq
	22,  // 99: openim.admin.admin.SearchDefaultFriend:input_type -> openim.admin.SearchDefaultFriendReq
	25,  // 100: openim.admin.admin.AddDefaultGroup:input_type -> openim.admin.AddDefaultGroupReq
	27,  // 101: openim.admin.admin.DelDefaultGroup:input_type -> openim.admin.DelDefaultGroupReq
	29,  // 102: openim.admin.admin.FindDefaultGroup:input_type -> openim.admin.FindDefaultGroupReq
	31,  // 103: openim.admin.admin.SearchDefaultGroup:input_type -> openim.admin.SearchDefaultGroupReq
	34,  // 104: openim.admin.admin.AddInvitationCode:input_type -> openim.admin.AddInvitationCodeReq
	36,  // 105: openim.admin.admin.GenInvitationCode:input_type -> openim.admin.GenInvitationCodeReq
	38,  // 106: openim.admin.admin.FindInvitationCode:input_type -> openim.admin.FindInvitationCodeReq
	40,  // 107: openim.admin.admin.UseInvitationCode:input_type -> openim.admin.UseInvitationCodeReq
	42,  // 108: openim.admin.admin.DelInvitationCode:input_type -> openim.admin.DelInvitationCodeReq
	45,  // 109: openim.admin.admin.SearchInvitationCode:input_type -> openim.admin.SearchInvitationCodeReq
	47,  // 110: openim.admin.admin.SearchUserIPLimitLogin:input_type -> openim.admin.SearchUserIPLimitLoginReq
	51,  // 111: openim.admin.admin.AddUserIPLimitLogin:input_type -> openim.admin.AddUserIPLimitLoginReq
	53,  // 112: openim.admin.admin.DelUserIPLimitLogin:input_type -> openim.admin.DelUserIPLimitLoginReq
	57,  // 113: openim.admin.admin.SearchIPForbidden:input_type -> openim.admin.SearchIPForbiddenReq
	59,  // 114: openim.admin.admin.AddIPForbidden:input_type -> openim.admin.AddIPForbiddenReq
	61,  // 115: openim.admin.admin.DelIPForbidden:input_type -> openim.admin.DelIPForbiddenReq
	67,  // 116: openim.admin.admin.CancellationUser:input_type -> openim.admin.CancellationUserReq
	69,  // 117: openim.admin.admin.BlockUser:input_type -> openim.admin.BlockUserReq
	71,  // 118: openim.admin.admin.UnblockUser:input_type -> openim.admin.UnblockUserReq
	73,  // 119: openim.admin.admin.SearchBlockUser:input_type -> openim.admin.SearchBlockUserReq
	76,  // 120: openim.admin.admin.FindUserBlockInfo:input_type -> openim.admin.FindUserBlockInfoReq
	63,  // 121: openim.admin.admin.CheckRegisterForbidden:input_type -> openim.admin.CheckRegisterForbiddenReq
	65,  // 122: openim.admin.admin.CheckLoginForbidden:input_type -> openim.admin.CheckLoginForbiddenReq
	79,  // 123: openim.admin.admin.CreateToken:input_type -> openim.admin.CreateTokenReq
	81,  // 124: openim.admin.admin.ParseToken:input_type -> openim.admin.ParseTokenReq
	85,  // 125: openim.admin.admin.AddApplet:input_type -> openim.admin.AddAppletReq
	87,  // 126: openim.admin.admin.DelApplet:input_type -> openim.admin.DelAppletReq
	89,  // 127: openim.admin.admin.UpdateApplet:input_type -> openim.admin.UpdateAppletReq
	91,  // 128: openim.admin.admin.FindApplet:input_type -> openim.admin.FindAppletReq
	93,  // 129: openim.admin.admin.SearchApplet:input_type -> openim.admin.SearchAppletReq
	95,  // 130: openim.admin.admin.SetDefaultApplet:input_type -> openim.admin.SetDefaultAppletReq
	97,  // 131: openim.admin.admin.GetApplet:input_type -> openim.admin.GetAppletReq
	103, // 132: openim.admin.admin.GetClientConfig:input_type -> openim.admin.GetClientConfigReq
	104, // 133: openim.admin.admin.GetListClientConfig:input_type -> openim.admin.GetListClientConfigReq
	99,  // 134: openim.admin.admin.SetClientConfig:input_type -> openim.admin.SetClientConfigReq
	101, // 135: openim.admin.admin.DelClientConfig:input_type -> openim.admin.DelClientConfigReq
	109, // 136: openim.admin.admin.GetUserToken:input_type -> openim.admin.GetUserTokenReq
	83,  // 137: openim.admin.admin.InvalidateToken:input_type -> openim.admin.InvalidateTokenReq
	111, // 138: openim.admin.admin.LatestApplicationVersion:input_type -> openim.admin.LatestApplicationVersionReq
	113, // 139: openim.admin.admin.AddApplicationVersion:input_type -> openim.admin.AddApplicationVersionReq
	115, // 140: openim.admin.admin.UpdateApplicationVersion:input_type -> openim.admin.UpdateApplicationVersionReq
	117, // 141: openim.admin.admin.DeleteApplicationVersion:input_type -> openim.admin.DeleteApplicationVersionReq
	119, // 142: openim.admin.admin.PageApplicationVersion:input_type -> openim.admin.PageApplicationVersionReq
	121, // 143: openim.admin.admin.GetGoogleAuth:input_type -> openim.admin.GetGoogleAuthReq
	123, // 144: openim.admin.admin.VerifyGoogleAuth:input_type -> openim.admin.VerifyGoogleAuthReq
	125, // 145: openim.admin.admin.GetUserLoginRecord:input_type -> openim.admin.GetUserLoginRecordReq
	128, // 146: openim.admin.admin.GetSmsConfig:input_type -> openim.admin.GetSmsConfigReq
	130, // 147: openim.admin.admin.SetSmsConfig:input_type -> openim.admin.SetSmsConfigReq
	132, // 148: openim.admin.admin.GetBucketConfig:input_type -> openim.admin.GetBucketConfigReq
	134, // 149: openim.admin.admin.SetBucketConfig:input_type -> openim.admin.SetBucketConfigReq
	140, // 150: openim.admin.admin.GetSigninConfig:input_type -> openim.admin.GetSigninConfigReq
	138, // 151: openim.admin.admin.SetSigninConfig:input_type -> openim.admin.SetSigninConfigReq
	144, // 152: openim.admin.admin.CreateAdminMenu:input_type -> openim.admin.CreateAdminMenuReq
	146, // 153: openim.admin.admin.UpdateAdminMenu:input_type -> openim.admin.UpdateAdminMenuReq
	148, // 154: openim.admin.admin.DeleteAdminMenu:input_type -> openim.admin.DeleteAdminMenuReq
	150, // 155: openim.admin.admin.TakeAdminMenu:input_type -> openim.admin.TakeAdminMenuReq
	152, // 156: openim.admin.admin.ListAdminMenu:input_type -> openim.admin.ListAdminMenuReq
	154, // 157: openim.admin.admin.ListAdminUserMenu:input_type -> openim.admin.ListAdminUserMenuReq
	158, // 158: openim.admin.admin.AssignAdminUserMenu:input_type -> openim.admin.AssignAdminUserMenuReq
	156, // 159: openim.admin.admin.GetAdminUserMenu:input_type -> openim.admin.GetAdminUserMenuReq
	160, // 160: openim.admin.admin.SearchOperationLog:input_type -> openim.admin.SearchOperationLogReq
	162, // 161: openim.admin.admin.GetOperationLog:input_type -> openim.admin.GetOperationLogReq
	164, // 162: openim.admin.admin.DeleteOperationLog:input_type -> openim.admin.DeleteOperationLogReq
	166, // 163: openim.admin.admin.CreateOperationLog:input_type -> openim.admin.CreateOperationLogReq
	1,   // 164: openim.admin.admin.Login:output_type -> openim.admin.LoginResp
	7,   // 165: openim.admin.admin.ChangePassword:output_type -> openim.admin.ChangePasswordResp
	5,   // 166: openim.admin.admin.AdminUpdateInfo:output_type -> openim.admin.AdminUpdateInfoResp
	15,  // 167: openim.admin.admin.GetAdminInfo:output_type -> openim.admin.GetAdminInfoResp
	3,   // 168: openim.admin.admin.AddAdminAccount:output_type -> openim.admin.AddAdminAccountResp
	10,  // 169: openim.admin.admin.ChangeAdminPassword:output_type -> openim.admin.ChangeAdminPasswordResp
	12,  // 170: openim.admin.admin.DelAdminAccount:output_type -> openim.admin.DelAdminAccountResp
	14,  // 171: openim.admin.admin.SearchAdminAccount:output_type -> openim.admin.SearchAdminAccountResp
	17,  // 172: openim.admin.admin.AddDefaultFriend:output_type -> openim.admin.AddDefaultFriendResp
	19,  // 173: openim.admin.admin.DelDefaultFriend:output_type -> openim.admin.DelDefaultFriendResp
	21,  // 174: openim.admin.admin.FindDefaultFriend:output_type -> openim.admin.FindDefaultFriendResp
	24,  // 175: openim.admin.admin.SearchDefaultFriend:output_type -> openim.admin.SearchDefaultFriendResp
	26,  // 176: openim.admin.admin.AddDefaultGroup:output_type -> openim.admin.AddDefaultGroupResp
	28,  // 177: openim.admin.admin.DelDefaultGroup:output_type -> openim.admin.DelDefaultGroupResp
	30,  // 178: openim.admin.admin.FindDefaultGroup:output_type -> openim.admin.FindDefaultGroupResp
	33,  // 179: openim.admin.admin.SearchDefaultGroup:output_type -> openim.admin.SearchDefaultGroupResp
	35,  // 180: openim.admin.admin.AddInvitationCode:output_type -> openim.admin.AddInvitationCodeResp
	37,  // 181: openim.admin.admin.GenInvitationCode:output_type -> openim.admin.GenInvitationCodeResp
	39,  // 182: openim.admin.admin.FindInvitationCode:output_type -> openim.admin.FindInvitationCodeResp
	41,  // 183: openim.admin.admin.UseInvitationCode:output_type -> openim.admin.UseInvitationCodeResp
	43,  // 184: openim.admin.admin.DelInvitationCode:output_type -> openim.admin.DelInvitationCodeResp
	46,  // 185: openim.admin.admin.SearchInvitationCode:output_type -> openim.admin.SearchInvitationCodeResp
	49,  // 186: openim.admin.admin.SearchUserIPLimitLogin:output_type -> openim.admin.SearchUserIPLimitLoginResp
	52,  // 187: openim.admin.admin.AddUserIPLimitLogin:output_type -> openim.admin.AddUserIPLimitLoginResp
	54,  // 188: openim.admin.admin.DelUserIPLimitLogin:output_type -> openim.admin.DelUserIPLimitLoginResp
	58,  // 189: openim.admin.admin.SearchIPForbidden:output_type -> openim.admin.SearchIPForbiddenResp
	60,  // 190: openim.admin.admin.AddIPForbidden:output_type -> openim.admin.AddIPForbiddenResp
	62,  // 191: openim.admin.admin.DelIPForbidden:output_type -> openim.admin.DelIPForbiddenResp
	68,  // 192: openim.admin.admin.CancellationUser:output_type -> openim.admin.CancellationUserResp
	70,  // 193: openim.admin.admin.BlockUser:output_type -> openim.admin.BlockUserResp
	72,  // 194: openim.admin.admin.UnblockUser:output_type -> openim.admin.UnblockUserResp
	75,  // 195: openim.admin.admin.SearchBlockUser:output_type -> openim.admin.SearchBlockUserResp
	78,  // 196: openim.admin.admin.FindUserBlockInfo:output_type -> openim.admin.FindUserBlockInfoResp
	64,  // 197: openim.admin.admin.CheckRegisterForbidden:output_type -> openim.admin.CheckRegisterForbiddenResp
	66,  // 198: openim.admin.admin.CheckLoginForbidden:output_type -> openim.admin.CheckLoginForbiddenResp
	80,  // 199: openim.admin.admin.CreateToken:output_type -> openim.admin.CreateTokenResp
	82,  // 200: openim.admin.admin.ParseToken:output_type -> openim.admin.ParseTokenResp
	86,  // 201: openim.admin.admin.AddApplet:output_type -> openim.admin.AddAppletResp
	88,  // 202: openim.admin.admin.DelApplet:output_type -> openim.admin.DelAppletResp
	90,  // 203: openim.admin.admin.UpdateApplet:output_type -> openim.admin.UpdateAppletResp
	92,  // 204: openim.admin.admin.FindApplet:output_type -> openim.admin.FindAppletResp
	94,  // 205: openim.admin.admin.SearchApplet:output_type -> openim.admin.SearchAppletResp
	96,  // 206: openim.admin.admin.SetDefaultApplet:output_type -> openim.admin.SetDefaultAppletResp
	98,  // 207: openim.admin.admin.GetApplet:output_type -> openim.admin.GetAppletResp
	108, // 208: openim.admin.admin.GetClientConfig:output_type -> openim.admin.GetClientConfigResp
	107, // 209: openim.admin.admin.GetListClientConfig:output_type -> openim.admin.GetListClientConfigResp
	100, // 210: openim.admin.admin.SetClientConfig:output_type -> openim.admin.SetClientConfigResp
	102, // 211: openim.admin.admin.DelClientConfig:output_type -> openim.admin.DelClientConfigResp
	110, // 212: openim.admin.admin.GetUserToken:output_type -> openim.admin.GetUserTokenResp
	84,  // 213: openim.admin.admin.InvalidateToken:output_type -> openim.admin.InvalidateTokenResp
	112, // 214: openim.admin.admin.LatestApplicationVersion:output_type -> openim.admin.LatestApplicationVersionResp
	114, // 215: openim.admin.admin.AddApplicationVersion:output_type -> openim.admin.AddApplicationVersionResp
	116, // 216: openim.admin.admin.UpdateApplicationVersion:output_type -> openim.admin.UpdateApplicationVersionResp
	118, // 217: openim.admin.admin.DeleteApplicationVersion:output_type -> openim.admin.DeleteApplicationVersionResp
	120, // 218: openim.admin.admin.PageApplicationVersion:output_type -> openim.admin.PageApplicationVersionResp
	122, // 219: openim.admin.admin.GetGoogleAuth:output_type -> openim.admin.GetGoogleAuthResp
	124, // 220: openim.admin.admin.VerifyGoogleAuth:output_type -> openim.admin.VerifyGoogleAuthResp
	127, // 221: openim.admin.admin.GetUserLoginRecord:output_type -> openim.admin.GetUserLoginRecordResp
	129, // 222: openim.admin.admin.GetSmsConfig:output_type -> openim.admin.GetSmsConfigResp
	131, // 223: openim.admin.admin.SetSmsConfig:output_type -> openim.admin.SetSmsConfigResp
	133, // 224: openim.admin.admin.GetBucketConfig:output_type -> openim.admin.GetBucketConfigResp
	135, // 225: openim.admin.admin.SetBucketConfig:output_type -> openim.admin.SetBucketConfigResp
	141, // 226: openim.admin.admin.GetSigninConfig:output_type -> openim.admin.GetSigninConfigResp
	139, // 227: openim.admin.admin.SetSigninConfig:output_type -> openim.admin.SetSigninConfigResp
	145, // 228: openim.admin.admin.CreateAdminMenu:output_type -> openim.admin.CreateAdminMenuResp
	147, // 229: openim.admin.admin.UpdateAdminMenu:output_type -> openim.admin.UpdateAdminMenuResp
	149, // 230: openim.admin.admin.DeleteAdminMenu:output_type -> openim.admin.DeleteAdminMenuResp
	151, // 231: openim.admin.admin.TakeAdminMenu:output_type -> openim.admin.TakeAdminMenuResp
	153, // 232: openim.admin.admin.ListAdminMenu:output_type -> openim.admin.ListAdminMenuResp
	155, // 233: openim.admin.admin.ListAdminUserMenu:output_type -> openim.admin.ListAdminUserMenuResp
	159, // 234: openim.admin.admin.AssignAdminUserMenu:output_type -> openim.admin.AssignAdminUserMenuResp
	157, // 235: openim.admin.admin.GetAdminUserMenu:output_type -> openim.admin.GetAdminUserMenuResp
	161, // 236: openim.admin.admin.SearchOperationLog:output_type -> openim.admin.SearchOperationLogResp
	163, // 237: openim.admin.admin.GetOperationLog:output_type -> openim.admin.GetOperationLogResp
	165, // 238: openim.admin.admin.DeleteOperationLog:output_type -> openim.admin.DeleteOperationLogResp
	167, // 239: openim.admin.admin.CreateOperationLog:output_type -> openim.admin.CreateOperationLogResp
	164, // [164:240] is the sub-list for method output_type
	88,  // [88:164] is the sub-list for method input_type
	88,  // [88:88] is the sub-list for extension type_name
	88,  // [88:88] is the sub-list for extension extendee
	0,   // [0:88] is the sub-list for field type_name
}

func init() { file_admin_admin_proto_init() }
func file_admin_admin_proto_init() {
	if File_admin_admin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   175,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_admin_proto_goTypes,
		DependencyIndexes: file_admin_admin_proto_depIdxs,
		MessageInfos:      file_admin_admin_proto_msgTypes,
	}.Build()
	File_admin_admin_proto = out.File
	file_admin_admin_proto_rawDesc = nil
	file_admin_admin_proto_goTypes = nil
	file_admin_admin_proto_depIdxs = nil
}
