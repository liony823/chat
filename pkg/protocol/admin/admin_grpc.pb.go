// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Admin_Login_FullMethodName                    = "/openim.admin.admin/Login"
	Admin_ChangePassword_FullMethodName           = "/openim.admin.admin/ChangePassword"
	Admin_AdminUpdateInfo_FullMethodName          = "/openim.admin.admin/AdminUpdateInfo"
	Admin_GetAdminInfo_FullMethodName             = "/openim.admin.admin/GetAdminInfo"
	Admin_AddAdminAccount_FullMethodName          = "/openim.admin.admin/AddAdminAccount"
	Admin_ChangeAdminPassword_FullMethodName      = "/openim.admin.admin/ChangeAdminPassword"
	Admin_DelAdminAccount_FullMethodName          = "/openim.admin.admin/DelAdminAccount"
	Admin_SearchAdminAccount_FullMethodName       = "/openim.admin.admin/SearchAdminAccount"
	Admin_AddDefaultFriend_FullMethodName         = "/openim.admin.admin/AddDefaultFriend"
	Admin_DelDefaultFriend_FullMethodName         = "/openim.admin.admin/DelDefaultFriend"
	Admin_FindDefaultFriend_FullMethodName        = "/openim.admin.admin/FindDefaultFriend"
	Admin_SearchDefaultFriend_FullMethodName      = "/openim.admin.admin/SearchDefaultFriend"
	Admin_AddDefaultGroup_FullMethodName          = "/openim.admin.admin/AddDefaultGroup"
	Admin_DelDefaultGroup_FullMethodName          = "/openim.admin.admin/DelDefaultGroup"
	Admin_FindDefaultGroup_FullMethodName         = "/openim.admin.admin/FindDefaultGroup"
	Admin_SearchDefaultGroup_FullMethodName       = "/openim.admin.admin/SearchDefaultGroup"
	Admin_AddInvitationCode_FullMethodName        = "/openim.admin.admin/AddInvitationCode"
	Admin_GenInvitationCode_FullMethodName        = "/openim.admin.admin/GenInvitationCode"
	Admin_FindInvitationCode_FullMethodName       = "/openim.admin.admin/FindInvitationCode"
	Admin_UseInvitationCode_FullMethodName        = "/openim.admin.admin/UseInvitationCode"
	Admin_DelInvitationCode_FullMethodName        = "/openim.admin.admin/DelInvitationCode"
	Admin_SearchInvitationCode_FullMethodName     = "/openim.admin.admin/SearchInvitationCode"
	Admin_SearchUserIPLimitLogin_FullMethodName   = "/openim.admin.admin/SearchUserIPLimitLogin"
	Admin_AddUserIPLimitLogin_FullMethodName      = "/openim.admin.admin/AddUserIPLimitLogin"
	Admin_DelUserIPLimitLogin_FullMethodName      = "/openim.admin.admin/DelUserIPLimitLogin"
	Admin_SearchIPForbidden_FullMethodName        = "/openim.admin.admin/SearchIPForbidden"
	Admin_AddIPForbidden_FullMethodName           = "/openim.admin.admin/AddIPForbidden"
	Admin_DelIPForbidden_FullMethodName           = "/openim.admin.admin/DelIPForbidden"
	Admin_CancellationUser_FullMethodName         = "/openim.admin.admin/CancellationUser"
	Admin_BlockUser_FullMethodName                = "/openim.admin.admin/BlockUser"
	Admin_UnblockUser_FullMethodName              = "/openim.admin.admin/UnblockUser"
	Admin_SearchBlockUser_FullMethodName          = "/openim.admin.admin/SearchBlockUser"
	Admin_FindUserBlockInfo_FullMethodName        = "/openim.admin.admin/FindUserBlockInfo"
	Admin_CheckRegisterForbidden_FullMethodName   = "/openim.admin.admin/CheckRegisterForbidden"
	Admin_CheckLoginForbidden_FullMethodName      = "/openim.admin.admin/CheckLoginForbidden"
	Admin_CreateToken_FullMethodName              = "/openim.admin.admin/CreateToken"
	Admin_ParseToken_FullMethodName               = "/openim.admin.admin/ParseToken"
	Admin_AddApplet_FullMethodName                = "/openim.admin.admin/AddApplet"
	Admin_DelApplet_FullMethodName                = "/openim.admin.admin/DelApplet"
	Admin_UpdateApplet_FullMethodName             = "/openim.admin.admin/UpdateApplet"
	Admin_FindApplet_FullMethodName               = "/openim.admin.admin/FindApplet"
	Admin_SearchApplet_FullMethodName             = "/openim.admin.admin/SearchApplet"
	Admin_SetDefaultApplet_FullMethodName         = "/openim.admin.admin/SetDefaultApplet"
	Admin_GetApplet_FullMethodName                = "/openim.admin.admin/GetApplet"
	Admin_GetClientConfig_FullMethodName          = "/openim.admin.admin/GetClientConfig"
	Admin_GetListClientConfig_FullMethodName      = "/openim.admin.admin/GetListClientConfig"
	Admin_SetClientConfig_FullMethodName          = "/openim.admin.admin/SetClientConfig"
	Admin_DelClientConfig_FullMethodName          = "/openim.admin.admin/DelClientConfig"
	Admin_GetUserToken_FullMethodName             = "/openim.admin.admin/GetUserToken"
	Admin_InvalidateToken_FullMethodName          = "/openim.admin.admin/InvalidateToken"
	Admin_LatestApplicationVersion_FullMethodName = "/openim.admin.admin/LatestApplicationVersion"
	Admin_AddApplicationVersion_FullMethodName    = "/openim.admin.admin/AddApplicationVersion"
	Admin_UpdateApplicationVersion_FullMethodName = "/openim.admin.admin/UpdateApplicationVersion"
	Admin_DeleteApplicationVersion_FullMethodName = "/openim.admin.admin/DeleteApplicationVersion"
	Admin_PageApplicationVersion_FullMethodName   = "/openim.admin.admin/PageApplicationVersion"
	Admin_GetGoogleAuth_FullMethodName            = "/openim.admin.admin/GetGoogleAuth"
	Admin_VerifyGoogleAuth_FullMethodName         = "/openim.admin.admin/VerifyGoogleAuth"
	Admin_GetUserLoginRecord_FullMethodName       = "/openim.admin.admin/GetUserLoginRecord"
	Admin_GetSmsConfig_FullMethodName             = "/openim.admin.admin/GetSmsConfig"
	Admin_SetSmsConfig_FullMethodName             = "/openim.admin.admin/SetSmsConfig"
	Admin_GetBucketConfig_FullMethodName          = "/openim.admin.admin/GetBucketConfig"
	Admin_SetBucketConfig_FullMethodName          = "/openim.admin.admin/SetBucketConfig"
	Admin_GetSigninConfig_FullMethodName          = "/openim.admin.admin/GetSigninConfig"
	Admin_SetSigninConfig_FullMethodName          = "/openim.admin.admin/SetSigninConfig"
	Admin_CreateAdminMenu_FullMethodName          = "/openim.admin.admin/CreateAdminMenu"
	Admin_UpdateAdminMenu_FullMethodName          = "/openim.admin.admin/UpdateAdminMenu"
	Admin_DeleteAdminMenu_FullMethodName          = "/openim.admin.admin/DeleteAdminMenu"
	Admin_TakeAdminMenu_FullMethodName            = "/openim.admin.admin/TakeAdminMenu"
	Admin_ListAdminMenu_FullMethodName            = "/openim.admin.admin/ListAdminMenu"
	Admin_ListAdminUserMenu_FullMethodName        = "/openim.admin.admin/ListAdminUserMenu"
	Admin_AssignAdminUserMenu_FullMethodName      = "/openim.admin.admin/AssignAdminUserMenu"
	Admin_GetAdminUserMenu_FullMethodName         = "/openim.admin.admin/GetAdminUserMenu"
	Admin_SearchOperationLog_FullMethodName       = "/openim.admin.admin/SearchOperationLog"
	Admin_GetOperationLog_FullMethodName          = "/openim.admin.admin/GetOperationLog"
	Admin_DeleteOperationLog_FullMethodName       = "/openim.admin.admin/DeleteOperationLog"
	Admin_CreateOperationLog_FullMethodName       = "/openim.admin.admin/CreateOperationLog"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// Login
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error)
	// Get administrator information
	GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error)
	AddAdminAccount(ctx context.Context, in *AddAdminAccountReq, opts ...grpc.CallOption) (*AddAdminAccountResp, error)
	ChangeAdminPassword(ctx context.Context, in *ChangeAdminPasswordReq, opts ...grpc.CallOption) (*ChangeAdminPasswordResp, error)
	DelAdminAccount(ctx context.Context, in *DelAdminAccountReq, opts ...grpc.CallOption) (*DelAdminAccountResp, error)
	SearchAdminAccount(ctx context.Context, in *SearchAdminAccountReq, opts ...grpc.CallOption) (*SearchAdminAccountResp, error)
	// Add Remove Get default friend list on registration
	AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error)
	DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error)
	FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error)
	AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error)
	DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error)
	FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error)
	// Invitation Code Generate Query Get
	AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error)
	GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error)
	FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error)
	UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error)
	DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error)
	SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error)
	// User login ip limit Query Add Remove
	SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error)
	// Prohibit users from registering at certain ip Query Add Remove
	SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error)
	AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error)
	DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error)
	// User Management Related Add Block/Unblock Pull
	CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error)
	SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error)
	FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error)
	CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error)
	// create token
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error)
	// parse token
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
	// app
	AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error)
	DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error)
	UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error)
	FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error)
	SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error)
	SetDefaultApplet(ctx context.Context, in *SetDefaultAppletReq, opts ...grpc.CallOption) (*SetDefaultAppletResp, error)
	GetApplet(ctx context.Context, in *GetAppletReq, opts ...grpc.CallOption) (*GetAppletResp, error)
	// Client Configuration
	GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error)
	GetListClientConfig(ctx context.Context, in *GetListClientConfigReq, opts ...grpc.CallOption) (*GetListClientConfigResp, error)
	SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error)
	DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error)
	GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error)
	// invalidate token
	InvalidateToken(ctx context.Context, in *InvalidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error)
	LatestApplicationVersion(ctx context.Context, in *LatestApplicationVersionReq, opts ...grpc.CallOption) (*LatestApplicationVersionResp, error)
	AddApplicationVersion(ctx context.Context, in *AddApplicationVersionReq, opts ...grpc.CallOption) (*AddApplicationVersionResp, error)
	UpdateApplicationVersion(ctx context.Context, in *UpdateApplicationVersionReq, opts ...grpc.CallOption) (*UpdateApplicationVersionResp, error)
	DeleteApplicationVersion(ctx context.Context, in *DeleteApplicationVersionReq, opts ...grpc.CallOption) (*DeleteApplicationVersionResp, error)
	PageApplicationVersion(ctx context.Context, in *PageApplicationVersionReq, opts ...grpc.CallOption) (*PageApplicationVersionResp, error)
	GetGoogleAuth(ctx context.Context, in *GetGoogleAuthReq, opts ...grpc.CallOption) (*GetGoogleAuthResp, error)
	VerifyGoogleAuth(ctx context.Context, in *VerifyGoogleAuthReq, opts ...grpc.CallOption) (*VerifyGoogleAuthResp, error)
	GetUserLoginRecord(ctx context.Context, in *GetUserLoginRecordReq, opts ...grpc.CallOption) (*GetUserLoginRecordResp, error)
	// sms config
	GetSmsConfig(ctx context.Context, in *GetSmsConfigReq, opts ...grpc.CallOption) (*GetSmsConfigResp, error)
	SetSmsConfig(ctx context.Context, in *SetSmsConfigReq, opts ...grpc.CallOption) (*SetSmsConfigResp, error)
	// bucket config
	GetBucketConfig(ctx context.Context, in *GetBucketConfigReq, opts ...grpc.CallOption) (*GetBucketConfigResp, error)
	SetBucketConfig(ctx context.Context, in *SetBucketConfigReq, opts ...grpc.CallOption) (*SetBucketConfigResp, error)
	// signin config
	GetSigninConfig(ctx context.Context, in *GetSigninConfigReq, opts ...grpc.CallOption) (*GetSigninConfigResp, error)
	SetSigninConfig(ctx context.Context, in *SetSigninConfigReq, opts ...grpc.CallOption) (*SetSigninConfigResp, error)
	// admin menu
	CreateAdminMenu(ctx context.Context, in *CreateAdminMenuReq, opts ...grpc.CallOption) (*CreateAdminMenuResp, error)
	UpdateAdminMenu(ctx context.Context, in *UpdateAdminMenuReq, opts ...grpc.CallOption) (*UpdateAdminMenuResp, error)
	DeleteAdminMenu(ctx context.Context, in *DeleteAdminMenuReq, opts ...grpc.CallOption) (*DeleteAdminMenuResp, error)
	TakeAdminMenu(ctx context.Context, in *TakeAdminMenuReq, opts ...grpc.CallOption) (*TakeAdminMenuResp, error)
	ListAdminMenu(ctx context.Context, in *ListAdminMenuReq, opts ...grpc.CallOption) (*ListAdminMenuResp, error)
	ListAdminUserMenu(ctx context.Context, in *ListAdminUserMenuReq, opts ...grpc.CallOption) (*ListAdminUserMenuResp, error)
	AssignAdminUserMenu(ctx context.Context, in *AssignAdminUserMenuReq, opts ...grpc.CallOption) (*AssignAdminUserMenuResp, error)
	GetAdminUserMenu(ctx context.Context, in *GetAdminUserMenuReq, opts ...grpc.CallOption) (*GetAdminUserMenuResp, error)
	// operation log
	SearchOperationLog(ctx context.Context, in *SearchOperationLogReq, opts ...grpc.CallOption) (*SearchOperationLogResp, error)
	GetOperationLog(ctx context.Context, in *GetOperationLogReq, opts ...grpc.CallOption) (*GetOperationLogResp, error)
	DeleteOperationLog(ctx context.Context, in *DeleteOperationLogReq, opts ...grpc.CallOption) (*DeleteOperationLogResp, error)
	CreateOperationLog(ctx context.Context, in *CreateOperationLogReq, opts ...grpc.CallOption) (*CreateOperationLogResp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Admin_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Admin_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUpdateInfoResp)
	err := c.cc.Invoke(ctx, Admin_AdminUpdateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdminInfoResp)
	err := c.cc.Invoke(ctx, Admin_GetAdminInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddAdminAccount(ctx context.Context, in *AddAdminAccountReq, opts ...grpc.CallOption) (*AddAdminAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAdminAccountResp)
	err := c.cc.Invoke(ctx, Admin_AddAdminAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangeAdminPassword(ctx context.Context, in *ChangeAdminPasswordReq, opts ...grpc.CallOption) (*ChangeAdminPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeAdminPasswordResp)
	err := c.cc.Invoke(ctx, Admin_ChangeAdminPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelAdminAccount(ctx context.Context, in *DelAdminAccountReq, opts ...grpc.CallOption) (*DelAdminAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAdminAccountResp)
	err := c.cc.Invoke(ctx, Admin_DelAdminAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchAdminAccount(ctx context.Context, in *SearchAdminAccountReq, opts ...grpc.CallOption) (*SearchAdminAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAdminAccountResp)
	err := c.cc.Invoke(ctx, Admin_SearchAdminAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_AddDefaultFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_DelDefaultFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_FindDefaultFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_SearchDefaultFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_AddDefaultGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_DelDefaultGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_FindDefaultGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_SearchDefaultGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_AddInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_GenInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_FindInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UseInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_UseInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_DelInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_SearchInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Admin_SearchUserIPLimitLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Admin_AddUserIPLimitLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Admin_DelUserIPLimitLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchIPForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_SearchIPForbidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddIPForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_AddIPForbidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelIPForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_DelIPForbidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancellationUserResp)
	err := c.cc.Invoke(ctx, Admin_CancellationUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, Admin_BlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnblockUserResp)
	err := c.cc.Invoke(ctx, Admin_UnblockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBlockUserResp)
	err := c.cc.Invoke(ctx, Admin_SearchBlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserBlockInfoResp)
	err := c.cc.Invoke(ctx, Admin_FindUserBlockInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRegisterForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_CheckRegisterForbidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckLoginForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_CheckLoginForbidden_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTokenResp)
	err := c.cc.Invoke(ctx, Admin_CreateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseTokenResp)
	err := c.cc.Invoke(ctx, Admin_ParseToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAppletResp)
	err := c.cc.Invoke(ctx, Admin_AddApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelAppletResp)
	err := c.cc.Invoke(ctx, Admin_DelApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppletResp)
	err := c.cc.Invoke(ctx, Admin_UpdateApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAppletResp)
	err := c.cc.Invoke(ctx, Admin_FindApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAppletResp)
	err := c.cc.Invoke(ctx, Admin_SearchApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetDefaultApplet(ctx context.Context, in *SetDefaultAppletReq, opts ...grpc.CallOption) (*SetDefaultAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultAppletResp)
	err := c.cc.Invoke(ctx, Admin_SetDefaultApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetApplet(ctx context.Context, in *GetAppletReq, opts ...grpc.CallOption) (*GetAppletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppletResp)
	err := c.cc.Invoke(ctx, Admin_GetApplet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_GetClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetListClientConfig(ctx context.Context, in *GetListClientConfigReq, opts ...grpc.CallOption) (*GetListClientConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_GetListClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_SetClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_DelClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTokenResp)
	err := c.cc.Invoke(ctx, Admin_GetUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InvalidateToken(ctx context.Context, in *InvalidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateTokenResp)
	err := c.cc.Invoke(ctx, Admin_InvalidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LatestApplicationVersion(ctx context.Context, in *LatestApplicationVersionReq, opts ...grpc.CallOption) (*LatestApplicationVersionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestApplicationVersionResp)
	err := c.cc.Invoke(ctx, Admin_LatestApplicationVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddApplicationVersion(ctx context.Context, in *AddApplicationVersionReq, opts ...grpc.CallOption) (*AddApplicationVersionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddApplicationVersionResp)
	err := c.cc.Invoke(ctx, Admin_AddApplicationVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateApplicationVersion(ctx context.Context, in *UpdateApplicationVersionReq, opts ...grpc.CallOption) (*UpdateApplicationVersionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationVersionResp)
	err := c.cc.Invoke(ctx, Admin_UpdateApplicationVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteApplicationVersion(ctx context.Context, in *DeleteApplicationVersionReq, opts ...grpc.CallOption) (*DeleteApplicationVersionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplicationVersionResp)
	err := c.cc.Invoke(ctx, Admin_DeleteApplicationVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) PageApplicationVersion(ctx context.Context, in *PageApplicationVersionReq, opts ...grpc.CallOption) (*PageApplicationVersionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageApplicationVersionResp)
	err := c.cc.Invoke(ctx, Admin_PageApplicationVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetGoogleAuth(ctx context.Context, in *GetGoogleAuthReq, opts ...grpc.CallOption) (*GetGoogleAuthResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoogleAuthResp)
	err := c.cc.Invoke(ctx, Admin_GetGoogleAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) VerifyGoogleAuth(ctx context.Context, in *VerifyGoogleAuthReq, opts ...grpc.CallOption) (*VerifyGoogleAuthResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyGoogleAuthResp)
	err := c.cc.Invoke(ctx, Admin_VerifyGoogleAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserLoginRecord(ctx context.Context, in *GetUserLoginRecordReq, opts ...grpc.CallOption) (*GetUserLoginRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLoginRecordResp)
	err := c.cc.Invoke(ctx, Admin_GetUserLoginRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSmsConfig(ctx context.Context, in *GetSmsConfigReq, opts ...grpc.CallOption) (*GetSmsConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSmsConfigResp)
	err := c.cc.Invoke(ctx, Admin_GetSmsConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetSmsConfig(ctx context.Context, in *SetSmsConfigReq, opts ...grpc.CallOption) (*SetSmsConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSmsConfigResp)
	err := c.cc.Invoke(ctx, Admin_SetSmsConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBucketConfig(ctx context.Context, in *GetBucketConfigReq, opts ...grpc.CallOption) (*GetBucketConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketConfigResp)
	err := c.cc.Invoke(ctx, Admin_GetBucketConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetBucketConfig(ctx context.Context, in *SetBucketConfigReq, opts ...grpc.CallOption) (*SetBucketConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBucketConfigResp)
	err := c.cc.Invoke(ctx, Admin_SetBucketConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSigninConfig(ctx context.Context, in *GetSigninConfigReq, opts ...grpc.CallOption) (*GetSigninConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSigninConfigResp)
	err := c.cc.Invoke(ctx, Admin_GetSigninConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetSigninConfig(ctx context.Context, in *SetSigninConfigReq, opts ...grpc.CallOption) (*SetSigninConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSigninConfigResp)
	err := c.cc.Invoke(ctx, Admin_SetSigninConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateAdminMenu(ctx context.Context, in *CreateAdminMenuReq, opts ...grpc.CallOption) (*CreateAdminMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdminMenuResp)
	err := c.cc.Invoke(ctx, Admin_CreateAdminMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAdminMenu(ctx context.Context, in *UpdateAdminMenuReq, opts ...grpc.CallOption) (*UpdateAdminMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdminMenuResp)
	err := c.cc.Invoke(ctx, Admin_UpdateAdminMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAdminMenu(ctx context.Context, in *DeleteAdminMenuReq, opts ...grpc.CallOption) (*DeleteAdminMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdminMenuResp)
	err := c.cc.Invoke(ctx, Admin_DeleteAdminMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) TakeAdminMenu(ctx context.Context, in *TakeAdminMenuReq, opts ...grpc.CallOption) (*TakeAdminMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TakeAdminMenuResp)
	err := c.cc.Invoke(ctx, Admin_TakeAdminMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAdminMenu(ctx context.Context, in *ListAdminMenuReq, opts ...grpc.CallOption) (*ListAdminMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdminMenuResp)
	err := c.cc.Invoke(ctx, Admin_ListAdminMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAdminUserMenu(ctx context.Context, in *ListAdminUserMenuReq, opts ...grpc.CallOption) (*ListAdminUserMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdminUserMenuResp)
	err := c.cc.Invoke(ctx, Admin_ListAdminUserMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AssignAdminUserMenu(ctx context.Context, in *AssignAdminUserMenuReq, opts ...grpc.CallOption) (*AssignAdminUserMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignAdminUserMenuResp)
	err := c.cc.Invoke(ctx, Admin_AssignAdminUserMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminUserMenu(ctx context.Context, in *GetAdminUserMenuReq, opts ...grpc.CallOption) (*GetAdminUserMenuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdminUserMenuResp)
	err := c.cc.Invoke(ctx, Admin_GetAdminUserMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchOperationLog(ctx context.Context, in *SearchOperationLogReq, opts ...grpc.CallOption) (*SearchOperationLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOperationLogResp)
	err := c.cc.Invoke(ctx, Admin_SearchOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOperationLog(ctx context.Context, in *GetOperationLogReq, opts ...grpc.CallOption) (*GetOperationLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationLogResp)
	err := c.cc.Invoke(ctx, Admin_GetOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteOperationLog(ctx context.Context, in *DeleteOperationLogReq, opts ...grpc.CallOption) (*DeleteOperationLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOperationLogResp)
	err := c.cc.Invoke(ctx, Admin_DeleteOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateOperationLog(ctx context.Context, in *CreateOperationLogReq, opts ...grpc.CallOption) (*CreateOperationLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOperationLogResp)
	err := c.cc.Invoke(ctx, Admin_CreateOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility.
type AdminServer interface {
	// Login
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error)
	// Get administrator information
	GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error)
	AddAdminAccount(context.Context, *AddAdminAccountReq) (*AddAdminAccountResp, error)
	ChangeAdminPassword(context.Context, *ChangeAdminPasswordReq) (*ChangeAdminPasswordResp, error)
	DelAdminAccount(context.Context, *DelAdminAccountReq) (*DelAdminAccountResp, error)
	SearchAdminAccount(context.Context, *SearchAdminAccountReq) (*SearchAdminAccountResp, error)
	// Add Remove Get default friend list on registration
	AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error)
	DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error)
	FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error)
	AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error)
	DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error)
	FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error)
	// Invitation Code Generate Query Get
	AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error)
	GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error)
	FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error)
	UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error)
	DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error)
	SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error)
	// User login ip limit Query Add Remove
	SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error)
	// Prohibit users from registering at certain ip Query Add Remove
	SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error)
	AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error)
	DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error)
	// User Management Related Add Block/Unblock Pull
	CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error)
	SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error)
	FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error)
	CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error)
	// create token
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error)
	// parse token
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	// app
	AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error)
	DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error)
	UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error)
	FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error)
	SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error)
	SetDefaultApplet(context.Context, *SetDefaultAppletReq) (*SetDefaultAppletResp, error)
	GetApplet(context.Context, *GetAppletReq) (*GetAppletResp, error)
	// Client Configuration
	GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error)
	GetListClientConfig(context.Context, *GetListClientConfigReq) (*GetListClientConfigResp, error)
	SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error)
	DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error)
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
	// invalidate token
	InvalidateToken(context.Context, *InvalidateTokenReq) (*InvalidateTokenResp, error)
	LatestApplicationVersion(context.Context, *LatestApplicationVersionReq) (*LatestApplicationVersionResp, error)
	AddApplicationVersion(context.Context, *AddApplicationVersionReq) (*AddApplicationVersionResp, error)
	UpdateApplicationVersion(context.Context, *UpdateApplicationVersionReq) (*UpdateApplicationVersionResp, error)
	DeleteApplicationVersion(context.Context, *DeleteApplicationVersionReq) (*DeleteApplicationVersionResp, error)
	PageApplicationVersion(context.Context, *PageApplicationVersionReq) (*PageApplicationVersionResp, error)
	GetGoogleAuth(context.Context, *GetGoogleAuthReq) (*GetGoogleAuthResp, error)
	VerifyGoogleAuth(context.Context, *VerifyGoogleAuthReq) (*VerifyGoogleAuthResp, error)
	GetUserLoginRecord(context.Context, *GetUserLoginRecordReq) (*GetUserLoginRecordResp, error)
	// sms config
	GetSmsConfig(context.Context, *GetSmsConfigReq) (*GetSmsConfigResp, error)
	SetSmsConfig(context.Context, *SetSmsConfigReq) (*SetSmsConfigResp, error)
	// bucket config
	GetBucketConfig(context.Context, *GetBucketConfigReq) (*GetBucketConfigResp, error)
	SetBucketConfig(context.Context, *SetBucketConfigReq) (*SetBucketConfigResp, error)
	// signin config
	GetSigninConfig(context.Context, *GetSigninConfigReq) (*GetSigninConfigResp, error)
	SetSigninConfig(context.Context, *SetSigninConfigReq) (*SetSigninConfigResp, error)
	// admin menu
	CreateAdminMenu(context.Context, *CreateAdminMenuReq) (*CreateAdminMenuResp, error)
	UpdateAdminMenu(context.Context, *UpdateAdminMenuReq) (*UpdateAdminMenuResp, error)
	DeleteAdminMenu(context.Context, *DeleteAdminMenuReq) (*DeleteAdminMenuResp, error)
	TakeAdminMenu(context.Context, *TakeAdminMenuReq) (*TakeAdminMenuResp, error)
	ListAdminMenu(context.Context, *ListAdminMenuReq) (*ListAdminMenuResp, error)
	ListAdminUserMenu(context.Context, *ListAdminUserMenuReq) (*ListAdminUserMenuResp, error)
	AssignAdminUserMenu(context.Context, *AssignAdminUserMenuReq) (*AssignAdminUserMenuResp, error)
	GetAdminUserMenu(context.Context, *GetAdminUserMenuReq) (*GetAdminUserMenuResp, error)
	// operation log
	SearchOperationLog(context.Context, *SearchOperationLogReq) (*SearchOperationLogResp, error)
	GetOperationLog(context.Context, *GetOperationLogReq) (*GetOperationLogResp, error)
	DeleteOperationLog(context.Context, *DeleteOperationLogReq) (*DeleteOperationLogResp, error)
	CreateOperationLog(context.Context, *CreateOperationLogReq) (*CreateOperationLogResp, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServer struct{}

func (UnimplementedAdminServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAdminServer) AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateInfo not implemented")
}
func (UnimplementedAdminServer) GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfo not implemented")
}
func (UnimplementedAdminServer) AddAdminAccount(context.Context, *AddAdminAccountReq) (*AddAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminAccount not implemented")
}
func (UnimplementedAdminServer) ChangeAdminPassword(context.Context, *ChangeAdminPasswordReq) (*ChangeAdminPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdminPassword not implemented")
}
func (UnimplementedAdminServer) DelAdminAccount(context.Context, *DelAdminAccountReq) (*DelAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAdminAccount not implemented")
}
func (UnimplementedAdminServer) SearchAdminAccount(context.Context, *SearchAdminAccountReq) (*SearchAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAdminAccount not implemented")
}
func (UnimplementedAdminServer) AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultFriend not implemented")
}
func (UnimplementedAdminServer) DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultFriend not implemented")
}
func (UnimplementedAdminServer) FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultFriend not implemented")
}
func (UnimplementedAdminServer) SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultFriend not implemented")
}
func (UnimplementedAdminServer) AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultGroup not implemented")
}
func (UnimplementedAdminServer) DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultGroup not implemented")
}
func (UnimplementedAdminServer) FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultGroup not implemented")
}
func (UnimplementedAdminServer) SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultGroup not implemented")
}
func (UnimplementedAdminServer) AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvitationCode not implemented")
}
func (UnimplementedAdminServer) GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenInvitationCode not implemented")
}
func (UnimplementedAdminServer) FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInvitationCode not implemented")
}
func (UnimplementedAdminServer) UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseInvitationCode not implemented")
}
func (UnimplementedAdminServer) DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInvitationCode not implemented")
}
func (UnimplementedAdminServer) SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInvitationCode not implemented")
}
func (UnimplementedAdminServer) SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserIPLimitLogin not implemented")
}
func (UnimplementedAdminServer) AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIPLimitLogin not implemented")
}
func (UnimplementedAdminServer) DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserIPLimitLogin not implemented")
}
func (UnimplementedAdminServer) SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIPForbidden not implemented")
}
func (UnimplementedAdminServer) AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPForbidden not implemented")
}
func (UnimplementedAdminServer) DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIPForbidden not implemented")
}
func (UnimplementedAdminServer) CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancellationUser not implemented")
}
func (UnimplementedAdminServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedAdminServer) UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedAdminServer) SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlockUser not implemented")
}
func (UnimplementedAdminServer) FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserBlockInfo not implemented")
}
func (UnimplementedAdminServer) CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegisterForbidden not implemented")
}
func (UnimplementedAdminServer) CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginForbidden not implemented")
}
func (UnimplementedAdminServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedAdminServer) ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedAdminServer) AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplet not implemented")
}
func (UnimplementedAdminServer) DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelApplet not implemented")
}
func (UnimplementedAdminServer) UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplet not implemented")
}
func (UnimplementedAdminServer) FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApplet not implemented")
}
func (UnimplementedAdminServer) SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApplet not implemented")
}
func (UnimplementedAdminServer) SetDefaultApplet(context.Context, *SetDefaultAppletReq) (*SetDefaultAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultApplet not implemented")
}
func (UnimplementedAdminServer) GetApplet(context.Context, *GetAppletReq) (*GetAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplet not implemented")
}
func (UnimplementedAdminServer) GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedAdminServer) GetListClientConfig(context.Context, *GetListClientConfigReq) (*GetListClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListClientConfig not implemented")
}
func (UnimplementedAdminServer) SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientConfig not implemented")
}
func (UnimplementedAdminServer) DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClientConfig not implemented")
}
func (UnimplementedAdminServer) GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedAdminServer) InvalidateToken(context.Context, *InvalidateTokenReq) (*InvalidateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateToken not implemented")
}
func (UnimplementedAdminServer) LatestApplicationVersion(context.Context, *LatestApplicationVersionReq) (*LatestApplicationVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestApplicationVersion not implemented")
}
func (UnimplementedAdminServer) AddApplicationVersion(context.Context, *AddApplicationVersionReq) (*AddApplicationVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplicationVersion not implemented")
}
func (UnimplementedAdminServer) UpdateApplicationVersion(context.Context, *UpdateApplicationVersionReq) (*UpdateApplicationVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationVersion not implemented")
}
func (UnimplementedAdminServer) DeleteApplicationVersion(context.Context, *DeleteApplicationVersionReq) (*DeleteApplicationVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationVersion not implemented")
}
func (UnimplementedAdminServer) PageApplicationVersion(context.Context, *PageApplicationVersionReq) (*PageApplicationVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageApplicationVersion not implemented")
}
func (UnimplementedAdminServer) GetGoogleAuth(context.Context, *GetGoogleAuthReq) (*GetGoogleAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoogleAuth not implemented")
}
func (UnimplementedAdminServer) VerifyGoogleAuth(context.Context, *VerifyGoogleAuthReq) (*VerifyGoogleAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyGoogleAuth not implemented")
}
func (UnimplementedAdminServer) GetUserLoginRecord(context.Context, *GetUserLoginRecordReq) (*GetUserLoginRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLoginRecord not implemented")
}
func (UnimplementedAdminServer) GetSmsConfig(context.Context, *GetSmsConfigReq) (*GetSmsConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsConfig not implemented")
}
func (UnimplementedAdminServer) SetSmsConfig(context.Context, *SetSmsConfigReq) (*SetSmsConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmsConfig not implemented")
}
func (UnimplementedAdminServer) GetBucketConfig(context.Context, *GetBucketConfigReq) (*GetBucketConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketConfig not implemented")
}
func (UnimplementedAdminServer) SetBucketConfig(context.Context, *SetBucketConfigReq) (*SetBucketConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBucketConfig not implemented")
}
func (UnimplementedAdminServer) GetSigninConfig(context.Context, *GetSigninConfigReq) (*GetSigninConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigninConfig not implemented")
}
func (UnimplementedAdminServer) SetSigninConfig(context.Context, *SetSigninConfigReq) (*SetSigninConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSigninConfig not implemented")
}
func (UnimplementedAdminServer) CreateAdminMenu(context.Context, *CreateAdminMenuReq) (*CreateAdminMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminMenu not implemented")
}
func (UnimplementedAdminServer) UpdateAdminMenu(context.Context, *UpdateAdminMenuReq) (*UpdateAdminMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminMenu not implemented")
}
func (UnimplementedAdminServer) DeleteAdminMenu(context.Context, *DeleteAdminMenuReq) (*DeleteAdminMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminMenu not implemented")
}
func (UnimplementedAdminServer) TakeAdminMenu(context.Context, *TakeAdminMenuReq) (*TakeAdminMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeAdminMenu not implemented")
}
func (UnimplementedAdminServer) ListAdminMenu(context.Context, *ListAdminMenuReq) (*ListAdminMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminMenu not implemented")
}
func (UnimplementedAdminServer) ListAdminUserMenu(context.Context, *ListAdminUserMenuReq) (*ListAdminUserMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminUserMenu not implemented")
}
func (UnimplementedAdminServer) AssignAdminUserMenu(context.Context, *AssignAdminUserMenuReq) (*AssignAdminUserMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAdminUserMenu not implemented")
}
func (UnimplementedAdminServer) GetAdminUserMenu(context.Context, *GetAdminUserMenuReq) (*GetAdminUserMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUserMenu not implemented")
}
func (UnimplementedAdminServer) SearchOperationLog(context.Context, *SearchOperationLogReq) (*SearchOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOperationLog not implemented")
}
func (UnimplementedAdminServer) GetOperationLog(context.Context, *GetOperationLogReq) (*GetOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationLog not implemented")
}
func (UnimplementedAdminServer) DeleteOperationLog(context.Context, *DeleteOperationLogReq) (*DeleteOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationLog not implemented")
}
func (UnimplementedAdminServer) CreateOperationLog(context.Context, *CreateOperationLogReq) (*CreateOperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationLog not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}
func (UnimplementedAdminServer) testEmbeddedByValue()               {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	// If the following call pancis, it indicates UnimplementedAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AdminUpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminUpdateInfo(ctx, req.(*AdminUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdminInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminInfo(ctx, req.(*GetAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddAdminAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddAdminAccount(ctx, req.(*AddAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangeAdminPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdminPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangeAdminPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ChangeAdminPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangeAdminPassword(ctx, req.(*ChangeAdminPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelAdminAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelAdminAccount(ctx, req.(*DelAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchAdminAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchAdminAccount(ctx, req.(*SearchAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDefaultFriend(ctx, req.(*AddDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDefaultFriend(ctx, req.(*DelDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindDefaultFriend(ctx, req.(*FindDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDefaultFriend(ctx, req.(*SearchDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDefaultGroup(ctx, req.(*AddDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDefaultGroup(ctx, req.(*DelDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindDefaultGroup(ctx, req.(*FindDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDefaultGroup(ctx, req.(*SearchDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddInvitationCode(ctx, req.(*AddInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GenInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenInvitationCode(ctx, req.(*GenInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindInvitationCode(ctx, req.(*FindInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UseInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UseInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UseInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UseInvitationCode(ctx, req.(*UseInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelInvitationCode(ctx, req.(*DelInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchInvitationCode(ctx, req.(*SearchInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchUserIPLimitLogin(ctx, req.(*SearchUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddUserIPLimitLogin(ctx, req.(*AddUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelUserIPLimitLogin(ctx, req.(*DelUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchIPForbidden(ctx, req.(*SearchIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddIPForbidden(ctx, req.(*AddIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelIPForbidden(ctx, req.(*DelIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CancellationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CancellationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CancellationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CancellationUser(ctx, req.(*CancellationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UnblockUser(ctx, req.(*UnblockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchBlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchBlockUser(ctx, req.(*SearchBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindUserBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserBlockInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindUserBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindUserBlockInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindUserBlockInfo(ctx, req.(*FindUserBlockInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckRegisterForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRegisterForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckRegisterForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CheckRegisterForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckRegisterForbidden(ctx, req.(*CheckRegisterForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckLoginForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckLoginForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CheckLoginForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckLoginForbidden(ctx, req.(*CheckLoginForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddApplet(ctx, req.(*AddAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelApplet(ctx, req.(*DelAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateApplet(ctx, req.(*UpdateAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindApplet(ctx, req.(*FindAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchApplet(ctx, req.(*SearchAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetDefaultApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetDefaultApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetDefaultApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetDefaultApplet(ctx, req.(*SetDefaultAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetApplet(ctx, req.(*GetAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetClientConfig(ctx, req.(*GetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetListClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetListClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetListClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetListClientConfig(ctx, req.(*GetListClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetClientConfig(ctx, req.(*SetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelClientConfig(ctx, req.(*DelClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserToken(ctx, req.(*GetUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InvalidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InvalidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_InvalidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InvalidateToken(ctx, req.(*InvalidateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LatestApplicationVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestApplicationVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LatestApplicationVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_LatestApplicationVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LatestApplicationVersion(ctx, req.(*LatestApplicationVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddApplicationVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddApplicationVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddApplicationVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddApplicationVersion(ctx, req.(*AddApplicationVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateApplicationVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateApplicationVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateApplicationVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateApplicationVersion(ctx, req.(*UpdateApplicationVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteApplicationVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteApplicationVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteApplicationVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteApplicationVersion(ctx, req.(*DeleteApplicationVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_PageApplicationVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageApplicationVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PageApplicationVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_PageApplicationVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PageApplicationVersion(ctx, req.(*PageApplicationVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetGoogleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoogleAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetGoogleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetGoogleAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetGoogleAuth(ctx, req.(*GetGoogleAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_VerifyGoogleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyGoogleAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).VerifyGoogleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_VerifyGoogleAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).VerifyGoogleAuth(ctx, req.(*VerifyGoogleAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserLoginRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserLoginRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUserLoginRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserLoginRecord(ctx, req.(*GetUserLoginRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetSmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSmsConfig(ctx, req.(*GetSmsConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetSmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSmsConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetSmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetSmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetSmsConfig(ctx, req.(*SetSmsConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBucketConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBucketConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetBucketConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBucketConfig(ctx, req.(*GetBucketConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetBucketConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBucketConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetBucketConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetBucketConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetBucketConfig(ctx, req.(*SetBucketConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSigninConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigninConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSigninConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetSigninConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSigninConfig(ctx, req.(*GetSigninConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetSigninConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSigninConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetSigninConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetSigninConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetSigninConfig(ctx, req.(*SetSigninConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateAdminMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAdminMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateAdminMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAdminMenu(ctx, req.(*CreateAdminMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAdminMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAdminMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateAdminMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAdminMenu(ctx, req.(*UpdateAdminMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAdminMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAdminMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteAdminMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAdminMenu(ctx, req.(*DeleteAdminMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_TakeAdminMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeAdminMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).TakeAdminMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_TakeAdminMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).TakeAdminMenu(ctx, req.(*TakeAdminMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAdminMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAdminMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListAdminMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAdminMenu(ctx, req.(*ListAdminMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAdminUserMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminUserMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAdminUserMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListAdminUserMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAdminUserMenu(ctx, req.(*ListAdminUserMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AssignAdminUserMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAdminUserMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AssignAdminUserMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AssignAdminUserMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AssignAdminUserMenu(ctx, req.(*AssignAdminUserMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminUserMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminUserMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminUserMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdminUserMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminUserMenu(ctx, req.(*GetAdminUserMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchOperationLog(ctx, req.(*SearchOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOperationLog(ctx, req.(*GetOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteOperationLog(ctx, req.(*DeleteOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateOperationLog(ctx, req.(*CreateOperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openim.admin.admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Admin_ChangePassword_Handler,
		},
		{
			MethodName: "AdminUpdateInfo",
			Handler:    _Admin_AdminUpdateInfo_Handler,
		},
		{
			MethodName: "GetAdminInfo",
			Handler:    _Admin_GetAdminInfo_Handler,
		},
		{
			MethodName: "AddAdminAccount",
			Handler:    _Admin_AddAdminAccount_Handler,
		},
		{
			MethodName: "ChangeAdminPassword",
			Handler:    _Admin_ChangeAdminPassword_Handler,
		},
		{
			MethodName: "DelAdminAccount",
			Handler:    _Admin_DelAdminAccount_Handler,
		},
		{
			MethodName: "SearchAdminAccount",
			Handler:    _Admin_SearchAdminAccount_Handler,
		},
		{
			MethodName: "AddDefaultFriend",
			Handler:    _Admin_AddDefaultFriend_Handler,
		},
		{
			MethodName: "DelDefaultFriend",
			Handler:    _Admin_DelDefaultFriend_Handler,
		},
		{
			MethodName: "FindDefaultFriend",
			Handler:    _Admin_FindDefaultFriend_Handler,
		},
		{
			MethodName: "SearchDefaultFriend",
			Handler:    _Admin_SearchDefaultFriend_Handler,
		},
		{
			MethodName: "AddDefaultGroup",
			Handler:    _Admin_AddDefaultGroup_Handler,
		},
		{
			MethodName: "DelDefaultGroup",
			Handler:    _Admin_DelDefaultGroup_Handler,
		},
		{
			MethodName: "FindDefaultGroup",
			Handler:    _Admin_FindDefaultGroup_Handler,
		},
		{
			MethodName: "SearchDefaultGroup",
			Handler:    _Admin_SearchDefaultGroup_Handler,
		},
		{
			MethodName: "AddInvitationCode",
			Handler:    _Admin_AddInvitationCode_Handler,
		},
		{
			MethodName: "GenInvitationCode",
			Handler:    _Admin_GenInvitationCode_Handler,
		},
		{
			MethodName: "FindInvitationCode",
			Handler:    _Admin_FindInvitationCode_Handler,
		},
		{
			MethodName: "UseInvitationCode",
			Handler:    _Admin_UseInvitationCode_Handler,
		},
		{
			MethodName: "DelInvitationCode",
			Handler:    _Admin_DelInvitationCode_Handler,
		},
		{
			MethodName: "SearchInvitationCode",
			Handler:    _Admin_SearchInvitationCode_Handler,
		},
		{
			MethodName: "SearchUserIPLimitLogin",
			Handler:    _Admin_SearchUserIPLimitLogin_Handler,
		},
		{
			MethodName: "AddUserIPLimitLogin",
			Handler:    _Admin_AddUserIPLimitLogin_Handler,
		},
		{
			MethodName: "DelUserIPLimitLogin",
			Handler:    _Admin_DelUserIPLimitLogin_Handler,
		},
		{
			MethodName: "SearchIPForbidden",
			Handler:    _Admin_SearchIPForbidden_Handler,
		},
		{
			MethodName: "AddIPForbidden",
			Handler:    _Admin_AddIPForbidden_Handler,
		},
		{
			MethodName: "DelIPForbidden",
			Handler:    _Admin_DelIPForbidden_Handler,
		},
		{
			MethodName: "CancellationUser",
			Handler:    _Admin_CancellationUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Admin_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Admin_UnblockUser_Handler,
		},
		{
			MethodName: "SearchBlockUser",
			Handler:    _Admin_SearchBlockUser_Handler,
		},
		{
			MethodName: "FindUserBlockInfo",
			Handler:    _Admin_FindUserBlockInfo_Handler,
		},
		{
			MethodName: "CheckRegisterForbidden",
			Handler:    _Admin_CheckRegisterForbidden_Handler,
		},
		{
			MethodName: "CheckLoginForbidden",
			Handler:    _Admin_CheckLoginForbidden_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Admin_CreateToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Admin_ParseToken_Handler,
		},
		{
			MethodName: "AddApplet",
			Handler:    _Admin_AddApplet_Handler,
		},
		{
			MethodName: "DelApplet",
			Handler:    _Admin_DelApplet_Handler,
		},
		{
			MethodName: "UpdateApplet",
			Handler:    _Admin_UpdateApplet_Handler,
		},
		{
			MethodName: "FindApplet",
			Handler:    _Admin_FindApplet_Handler,
		},
		{
			MethodName: "SearchApplet",
			Handler:    _Admin_SearchApplet_Handler,
		},
		{
			MethodName: "SetDefaultApplet",
			Handler:    _Admin_SetDefaultApplet_Handler,
		},
		{
			MethodName: "GetApplet",
			Handler:    _Admin_GetApplet_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _Admin_GetClientConfig_Handler,
		},
		{
			MethodName: "GetListClientConfig",
			Handler:    _Admin_GetListClientConfig_Handler,
		},
		{
			MethodName: "SetClientConfig",
			Handler:    _Admin_SetClientConfig_Handler,
		},
		{
			MethodName: "DelClientConfig",
			Handler:    _Admin_DelClientConfig_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Admin_GetUserToken_Handler,
		},
		{
			MethodName: "InvalidateToken",
			Handler:    _Admin_InvalidateToken_Handler,
		},
		{
			MethodName: "LatestApplicationVersion",
			Handler:    _Admin_LatestApplicationVersion_Handler,
		},
		{
			MethodName: "AddApplicationVersion",
			Handler:    _Admin_AddApplicationVersion_Handler,
		},
		{
			MethodName: "UpdateApplicationVersion",
			Handler:    _Admin_UpdateApplicationVersion_Handler,
		},
		{
			MethodName: "DeleteApplicationVersion",
			Handler:    _Admin_DeleteApplicationVersion_Handler,
		},
		{
			MethodName: "PageApplicationVersion",
			Handler:    _Admin_PageApplicationVersion_Handler,
		},
		{
			MethodName: "GetGoogleAuth",
			Handler:    _Admin_GetGoogleAuth_Handler,
		},
		{
			MethodName: "VerifyGoogleAuth",
			Handler:    _Admin_VerifyGoogleAuth_Handler,
		},
		{
			MethodName: "GetUserLoginRecord",
			Handler:    _Admin_GetUserLoginRecord_Handler,
		},
		{
			MethodName: "GetSmsConfig",
			Handler:    _Admin_GetSmsConfig_Handler,
		},
		{
			MethodName: "SetSmsConfig",
			Handler:    _Admin_SetSmsConfig_Handler,
		},
		{
			MethodName: "GetBucketConfig",
			Handler:    _Admin_GetBucketConfig_Handler,
		},
		{
			MethodName: "SetBucketConfig",
			Handler:    _Admin_SetBucketConfig_Handler,
		},
		{
			MethodName: "GetSigninConfig",
			Handler:    _Admin_GetSigninConfig_Handler,
		},
		{
			MethodName: "SetSigninConfig",
			Handler:    _Admin_SetSigninConfig_Handler,
		},
		{
			MethodName: "CreateAdminMenu",
			Handler:    _Admin_CreateAdminMenu_Handler,
		},
		{
			MethodName: "UpdateAdminMenu",
			Handler:    _Admin_UpdateAdminMenu_Handler,
		},
		{
			MethodName: "DeleteAdminMenu",
			Handler:    _Admin_DeleteAdminMenu_Handler,
		},
		{
			MethodName: "TakeAdminMenu",
			Handler:    _Admin_TakeAdminMenu_Handler,
		},
		{
			MethodName: "ListAdminMenu",
			Handler:    _Admin_ListAdminMenu_Handler,
		},
		{
			MethodName: "ListAdminUserMenu",
			Handler:    _Admin_ListAdminUserMenu_Handler,
		},
		{
			MethodName: "AssignAdminUserMenu",
			Handler:    _Admin_AssignAdminUserMenu_Handler,
		},
		{
			MethodName: "GetAdminUserMenu",
			Handler:    _Admin_GetAdminUserMenu_Handler,
		},
		{
			MethodName: "SearchOperationLog",
			Handler:    _Admin_SearchOperationLog_Handler,
		},
		{
			MethodName: "GetOperationLog",
			Handler:    _Admin_GetOperationLog_Handler,
		},
		{
			MethodName: "DeleteOperationLog",
			Handler:    _Admin_DeleteOperationLog_Handler,
		},
		{
			MethodName: "CreateOperationLog",
			Handler:    _Admin_CreateOperationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin.proto",
}
